{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"elevation\", \"style\", \"theme\", \"value\", \"loading\", \"testID\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../core/theming\";\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport IconButton from \"./IconButton/IconButton\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\nimport Surface from \"./Surface\";\nvar Searchbar = React.forwardRef(function (_ref, ref) {\n  var _theme$colors;\n\n  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,\n      clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,\n      clearIcon = _ref.clearIcon,\n      icon = _ref.icon,\n      customIconColor = _ref.iconColor,\n      inputStyle = _ref.inputStyle,\n      onIconPress = _ref.onIconPress,\n      placeholder = _ref.placeholder,\n      _ref$searchAccessibil = _ref.searchAccessibilityLabel,\n      searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,\n      _ref$elevation = _ref.elevation,\n      elevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      style = _ref.style,\n      theme = _ref.theme,\n      value = _ref.value,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'search-bar' : _ref$testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var root = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    var input = root.current;\n\n    if (input) {\n      return {\n        focus: function focus() {\n          return input.focus();\n        },\n        clear: function clear() {\n          return input.clear();\n        },\n        setNativeProps: function setNativeProps(args) {\n          return input.setNativeProps(args);\n        },\n        isFocused: function isFocused() {\n          return input.isFocused();\n        },\n        blur: function blur() {\n          return input.blur();\n        }\n      };\n    }\n\n    var noop = function noop() {\n      throw new Error('TextInput is not available');\n    };\n\n    return {\n      focus: noop,\n      clear: noop,\n      setNativeProps: noop,\n      isFocused: noop,\n      blur: noop\n    };\n  });\n\n  var handleClearPress = function handleClearPress() {\n    var _root$current, _rest$onChangeText;\n\n    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness,\n      dark = theme.dark,\n      isV3 = theme.isV3;\n  var textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n  var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness\n    }, !isV3 && styles.elevation, styles.container, style]\n  }, theme.isV3 && {\n    elevation: elevation\n  }), React.createElement(IconButton, {\n    accessibilityRole: \"button\",\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onIconPress,\n    iconColor: iconColor,\n    icon: icon || function (_ref2) {\n      var size = _ref2.size,\n          color = _ref2.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"magnify\",\n        color: color,\n        size: size,\n        direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityLabel: searchAccessibilityLabel\n  }), React.createElement(TextInput, _extends({\n    style: [styles.input, _objectSpread(_objectSpread({\n      color: textColor\n    }, theme.isV3 ? theme.fonts.default : theme.fonts.regular), Platform.select({\n      web: {\n        outline: 'none'\n      }\n    })), inputStyle],\n    placeholder: placeholder || '',\n    placeholderTextColor: theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.placeholder,\n    selectionColor: colors === null || colors === void 0 ? void 0 : colors.primary,\n    underlineColorAndroid: \"transparent\",\n    returnKeyType: \"search\",\n    keyboardAppearance: dark ? 'dark' : 'light',\n    accessibilityRole: \"search\",\n    ref: root,\n    value: value,\n    testID: testID\n  }, rest)), loading ? React.createElement(ActivityIndicator, {\n    testID: \"activity-indicator\",\n    style: styles.loader\n  }) : React.createElement(View, {\n    pointerEvents: value ? 'auto' : 'none',\n    testID: testID + \"-icon-wrapper\"\n  }, React.createElement(IconButton, {\n    borderless: true,\n    accessibilityLabel: clearAccessibilityLabel,\n    iconColor: value ? iconColor : 'rgba(255, 255, 255, 0)',\n    rippleColor: rippleColor,\n    onPress: handleClearPress,\n    icon: clearIcon || function (_ref3) {\n      var size = _ref3.size,\n          color = _ref3.color;\n      return React.createElement(MaterialCommunityIcon, {\n        name: \"close\",\n        color: color,\n        size: size,\n        direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n      });\n    },\n    accessibilityRole: \"button\"\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0\n  },\n  elevation: {\n    elevation: 4\n  },\n  loader: {\n    margin: 10\n  }\n});\nexport default withInternalTheme(Searchbar);","map":{"version":3,"sources":["Searchbar.tsx"],"names":["React","color","withInternalTheme","ActivityIndicator","IconButton","MaterialCommunityIcon","Surface","Searchbar","forwardRef","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","elevation","style","theme","value","loading","testID","rest","ref","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","isV3","textColor","onSurface","text","alpha","rgb","string","rippleColor","borderRadius","styles","container","size","I18nManager","getConstants","isRTL","fonts","default","regular","Platform","select","web","outline","primary","loader","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../core/theming';\nimport type { InternalTheme } from '../types';\nimport ActivityIndicator from './ActivityIndicator';\nimport type { IconSource } from './Icon';\nimport IconButton from './IconButton/IconButton';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n  /**\n   * Custom flag for replacing clear button with activity indicator.\n   */\n  loading?: Boolean;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      elevation = 1,\n      style,\n      theme,\n      value,\n      loading = false,\n      testID = 'search-bar',\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, isV3 } = theme;\n    const textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          styles.container,\n          style,\n        ]}\n        {...(theme.isV3 && { elevation })}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...(theme.isV3 ? theme.fonts.default : theme.fonts.regular),\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={\n            theme.isV3 ? theme.colors.onSurface : theme.colors?.placeholder\n          }\n          selectionColor={colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          testID={testID}\n          {...rest}\n        />\n        {loading ? (\n          <ActivityIndicator\n            testID=\"activity-indicator\"\n            style={styles.loader}\n          />\n        ) : (\n          // Clear icon should be always rendered within Searchbar – it's transparent,\n          // without touch events, when there is no value. It's done to avoid issues\n          // with the abruptly stopping ripple effect and changing bar width on web,\n          // when clearing the value.\n          <View\n            pointerEvents={value ? 'auto' : 'none'}\n            testID={`${testID}-icon-wrapper`}\n          >\n            <IconButton\n              borderless\n              accessibilityLabel={clearAccessibilityLabel}\n              iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n              rippleColor={rippleColor}\n              onPress={handleClearPress}\n              icon={\n                clearIcon ||\n                (({ size, color }) => (\n                  <MaterialCommunityIcon\n                    name=\"close\"\n                    color={color}\n                    size={size}\n                    direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                  />\n                ))\n              }\n              accessibilityRole=\"button\"\n            />\n          </View>\n        )}\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  elevation: {\n    elevation: 4,\n  },\n  loader: {\n    margin: 10,\n  },\n});\n\nexport default withInternalTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}
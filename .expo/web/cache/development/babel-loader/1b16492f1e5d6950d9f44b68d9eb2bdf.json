{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      lineHeight = _props$labelProps.lineHeight,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor,\n      errorColor = _props$labelProps.errorColor,\n      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,\n      maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier,\n      testID = _props$labelProps.testID,\n      contentStyle = _props$labelProps.contentStyle;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n\n  var labelStyle = _objectSpread(_objectSpread({}, font), {}, {\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n\n  var textColor = error && errorColor ? errorColor : placeholderColor;\n  return label ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), React.createElement(AnimatedText, {\n    variant: \"bodySmall\",\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-label-active\"\n  }, label), React.createElement(AnimatedText, {\n    variant: parentState.focused ? 'bodyLarge' : 'bodySmall',\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: textColor,\n      opacity: placeholderOpacity\n    }, contentStyle],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-label-inactive\"\n  }, label)) : null;\n};\n\nvar styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"sources":["InputLabel.tsx"],"names":["React","AnimatedText","InputLabel","props","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","lineHeight","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","testID","contentStyle","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","textColor","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","top","color","create","zIndex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport AnimatedText from '../../Typography/AnimatedText';\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  const textColor = error && errorColor ? errorColor : placeholderColor;\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        variant=\"bodySmall\"\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-active`}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        variant={parentState.focused ? 'bodyLarge' : 'bodySmall'}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: textColor,\n            opacity: placeholderOpacity,\n          },\n          contentStyle,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        testID={`${testID}-label-inactive`}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"outlineStyle\", \"textColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\", \"contentStyle\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED, LABEL_PADDING_TOP_DENSE } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from \"./helpers\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      outlineStyle = _ref.outlineStyle,\n      textColor = _ref.textColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'text-input-outlined' : _ref$testID,\n      contentStyle = _ref.contentStyle,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      isV3 = theme.isV3,\n      roundness = theme.roundness;\n  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _getConstants = getConstants(isV3),\n      INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n      MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n\n  var _ref4 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  var _getOutlinedInputColo = getOutlinedInputColors({\n    activeOutlineColor: activeOutlineColor,\n    customOutlineColor: customOutlineColor,\n    textColor: textColor,\n    disabled: disabled,\n    error: error,\n    theme: theme\n  }),\n      inputTextColor = _getOutlinedInputColo.inputTextColor,\n      activeColor = _getOutlinedInputColo.activeColor,\n      outlineColor = _getOutlinedInputColo.outlineColor,\n      placeholderColor = _getOutlinedInputColo.placeholderColor,\n      errorColor = _getOutlinedInputColo.errorColor;\n\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.getConstants().isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID,\n    contentStyle: contentStyle\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var outlinedHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP : 0);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    style: outlineStyle,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: testID\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput, contentStyle]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n      activeColor = _ref3.activeColor,\n      backgroundColor = _ref3.backgroundColor,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      focused = _ref3.focused,\n      outlineColor = _ref3.outlineColor,\n      roundness = _ref3.roundness,\n      style = _ref3.style;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }, style]\n  });\n};\n\nvar styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["React","AdornmentType","AdornmentSide","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP_DENSE","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","InputLabel","LabelBackground","TextInputOutlined","disabled","editable","label","error","selectionColor","underlineColor","_underlineColor","outlineColor","customOutlineColor","activeOutlineColor","outlineStyle","textColor","dense","style","theme","render","props","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","contentStyle","rest","adornmentConfig","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","fontSize","fontSizeStyle","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","StyleSheet","flatten","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelProps","wiggleOffsetX","maxFontSizeMultiplier","minHeight","outlinedHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","labelContainer","paddingTop","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","Outline","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","margin","zIndex"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;AAaA,SAASC,aAAT,EAAwBC,aAAxB;AACA,OAAOC,kBAAP,IACEC,kBADF,EAEEC,yCAFF;AAKA,SACEC,yBADF,EAEEC,yBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,gCALF,EAMEC,iBANF,EAOEC,yBAPF,EAQEC,uBARF;AAUA,SACEC,yBADF,EAEEC,oBAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAMEC,sBANF,EAOEC,wCAPF,EAQEC,sBARF,EASEC,YATF;AAWA,OAAOC,UAAP;AACA,OAAOC,eAAP;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EA+BC;EAAA;;EA/BA,oBA+BL,IA/BK,CACzBC,QADyB;EAAA,IACzBA,QADyB,8BACd,KADc;EAAA,oBA+BL,IA/BK,CAEzBC,QAFyB;EAAA,IAEzBA,QAFyB,8BAEd,IAFc;EAAA,IAGzBC,KAHyB,GA+BL,IA/BK,CAGzBA,KAHyB;EAAA,iBA+BL,IA/BK,CAIzBC,KAJyB;EAAA,IAIzBA,KAJyB,2BAIjB,KAJiB;EAAA,IAKzBC,cALyB,GA+BL,IA/BK,CAKzBA,cALyB;EAAA,IAMTE,eANS,GA+BL,IA/BK,CAMzBD,cANyB;EAAA,IAOXG,kBAPW,GA+BL,IA/BK,CAOzBD,YAPyB;EAAA,IAQzBE,kBARyB,GA+BL,IA/BK,CAQzBA,kBARyB;EAAA,IASzBC,YATyB,GA+BL,IA/BK,CASzBA,YATyB;EAAA,IAUzBC,SAVyB,GA+BL,IA/BK,CAUzBA,SAVyB;EAAA,IAWzBC,KAXyB,GA+BL,IA/BK,CAWzBA,KAXyB;EAAA,IAYzBC,KAZyB,GA+BL,IA/BK,CAYzBA,KAZyB;EAAA,IAazBC,KAbyB,GA+BL,IA/BK,CAazBA,KAbyB;EAAA,kBA+BL,IA/BK,CAczBC,MAdyB;EAAA,IAczBA,MAdyB,4BAcfC,UAAAA,KAAkB;IAAA,OAAK,KAAA,CAAA,aAAA,CAAC,eAAD,EAAqBA,KAArB,CAAL;EAAA,CAdH;EAAA,qBA+BL,IA/BK,CAezBC,SAfyB;EAAA,IAezBA,SAfyB,+BAeb,KAfa;EAAA,IAgBzBC,WAhByB,GA+BL,IA/BK,CAgBzBA,WAhByB;EAAA,IAiBzBC,QAjByB,GA+BL,IA/BK,CAiBzBA,QAjByB;EAAA,IAkBzBC,OAlByB,GA+BL,IA/BK,CAkBzBA,OAlByB;EAAA,IAmBzBC,UAnByB,GA+BL,IA/BK,CAmBzBA,UAnByB;EAAA,IAoBzBC,MApByB,GA+BL,IA/BK,CAoBzBA,MApByB;EAAA,IAqBzBC,YArByB,GA+BL,IA/BK,CAqBzBA,YArByB;EAAA,IAsBzBC,oBAtByB,GA+BL,IA/BK,CAsBzBA,oBAtByB;EAAA,IAuBzBC,uBAvByB,GA+BL,IA/BK,CAuBzBA,uBAvByB;EAAA,IAwBzBC,wBAxByB,GA+BL,IA/BK,CAwBzBA,wBAxByB;EAAA,IAyBzBC,IAzByB,GA+BL,IA/BK,CAyBzBA,IAzByB;EAAA,IA0BzBC,KA1ByB,GA+BL,IA/BK,CA0BzBA,KA1ByB;EAAA,IA2BzBC,oBA3ByB,GA+BL,IA/BK,CA2BzBA,oBA3ByB;EAAA,kBA+BL,IA/BK,CA4BzBC,MA5ByB;EAAA,IA4BzBA,MA5ByB,4BA4BhB,qBA5BgB;EAAA,IA6BzBC,YA7ByB,GA+BL,IA/BK,CA6BzBA,YA7ByB;EAAA,IA8BtBC,IA9BsB,4BA+BL,IA/BK;;EAgCzB,IAAMC,eAAe,GAAGtD,kBAAkB,CAAC;IAAEgD,IAAI,EAAJA,IAAF;IAAQC,KAAAA,EAAAA;EAAR,CAAD,CAA1C;EAEA,IAAQM,MAAR,GAAoCpB,KAApC,CAAQoB,MAAR;EAAA,IAAgBC,IAAhB,GAAoCrB,KAApC,CAAgBqB,IAAhB;EAAA,IAAsBC,SAAtB,GAAoCtB,KAApC,CAAsBsB,SAAtB;EACA,IAAMC,IAAI,GAAGF,IAAI,GAAGrB,KAAK,CAACwB,KAANxB,CAAYyB,SAAf,GAA2BzB,KAAK,CAACwB,KAANxB,CAAY0B,OAAxD;EACA,IAAMC,gBAAgB,GAAGvB,WAAW,CAACwB,OAAZxB,IAAuBf,KAAhD;;EAEA,oBACEP,YAAY,CAACuC,IAAD,CADd;EAAA,IAAQQ,wBAAR,iBAAQA,wBAAR;EAAA,IAAkCC,UAAlC,iBAAkCA,UAAlC;EAAA,IAA8CC,gBAA9C,iBAA8CA,gBAA9C;;EAGA,YAQKU,UAAU,CAACC,OAAXD,CAAmB1C,KAAnB0C,KAA6B,EARlC;EAAA,IACYR,aADZ,SACED,QADF;EAAA,IAEEE,UAFF,SAEEA,UAFF;EAAA,IAGEC,UAHF,SAGEA,UAHF;EAAA,IAIEC,MAJF,SAIEA,MAJF;EAAA,kCAKEC,eALF;EAAA,IAKEA,eALF,sCAKoBjB,MAAM,KAAA,IAANA,IAAAA,MAAM,KAAA,KAAA,CAANA,GAAM,KAAA,CAANA,GAAAA,MAAM,CAAEkB,UAL5B;EAAA,IAMEC,SANF,SAMEA,SANF;EAAA,IAOKC,SAPL;;EASA,IAAMR,QAAQ,GAAGC,aAAa,IAAIlE,yBAAlC;;EAEA,4BAMIc,sBAAsB,CAAC;IACzBc,kBAAkB,EAAlBA,kBADyB;IAEzBD,kBAAkB,EAAlBA,kBAFyB;IAGzBG,SAAS,EAATA,SAHyB;IAIzBX,QAAQ,EAARA,QAJyB;IAKzBG,KAAK,EAALA,KALyB;IAMzBW,KAAAA,EAAAA;EANyB,CAAD,CAN1B;EAAA,IACE2C,cADF,yBACEA,cADF;EAAA,IAEEC,WAFF,yBAEEA,WAFF;EAAA,IAGEnD,YAHF,yBAGEA,YAHF;EAAA,IAIEoD,gBAJF,yBAIEA,gBAJF;EAAA,IAKEC,UALF,yBAKEA,UALF;;EAeA,IAAMC,UAAU,GAAG/E,yBAAyB,GAAGgE,QAA/C;EACA,IAAMgB,SAAS,GAAGjF,yBAAyB,GAAGiE,QAA9C;EAEA,IAAMiB,UAAU,GAAG7C,WAAW,CAAC8C,WAAZ9C,CAAwB+C,KAA3C;EACA,IAAMC,WAAW,GAAGhD,WAAW,CAAC8C,WAAZ9C,CAAwBgC,MAA5C;EACA,IAAMiB,cAAc,GAAGJ,UAAU,GAAG,CAApC;EACA,IAAMK,eAAe,GAAGF,WAAW,GAAG,CAAtC;EAEA,IAAMG,mBAAmB,GACvB,CAACC,WAAW,CAAC1E,YAAZ0E,GAA2BC,KAA3BD,GAAmC,CAAnCA,GAAuC,CAAC,CAAzC,KACCH,cAAc,GACZN,UAAU,GAAGE,UAAbF,GAA2B,CAD7BM,GAEC,CAACrB,QAAQ,GAAGhE,yBAAZ,IAAyC+E,UAH3C,CADF;EAMA,IAAIW,uBAAuB,GAAG,CAA9B;EACA,IAAMC,mBAAmB,GAAGxC,eAAe,CAACyC,IAAhBzC,CAC1B,UAAA,KAAA,EAAA;IAAA,IAAG0C,IAAH,GAAe,KAAf,CAAGA,IAAH;IAAA,IAASC,IAAT,GAAe,KAAf,CAASA,IAAT;IAAe,OACbD,IAAI,KAAKlG,aAAa,CAACoG,IAAvBF,IAA+BC,IAAI,KAAKpG,aAAa,CAACsG,IADzC;EAC6C,CAFlC7C,CAA5B;;EAIA,IAAIwC,mBAAJ,EAAyB;IACvBD,uBAAuB,GACrB,CAACF,WAAW,CAAC1E,YAAZ0E,GAA2BC,KAA3BD,GAAmC,CAAC,CAApCA,GAAwC,CAAzC,KACCtF,cAAc,GAAG6D,gBAAjB7D,IAAqCmD,IAAI,GAAG,CAAH,GAAO,CAAhDnD,CADD,CADFwF;EAGF;;EAEA,IAAMO,cAAc,GAClB,CAACnE,KAAK,GAAGzB,yBAAH,GAA+ByD,UAArC,IAAmD1D,iBADrD;EAGA,IAAM8F,WAAW,GAAG1F,oBAAoB,CAAC4E,WAAD,EAAchB,MAAd,EAAsB6B,cAAtB,CAAxC;EAEA,IAAME,WAAW,GAAG5F,yBAAyB,CAC3C6E,WAD2C,EAE3Cc,WAF2C,EAG3C9F,iBAH2C,CAA7C;;EAMA,IAAIgE,MAAM,IAAI,OAAOA,MAAP,KAAkB,QAAhC,EAA0C;IAExCgC,OAAO,CAACC,IAARD,CAAa,kDAAbA;EACF;;EAEA,IAAME,eAAe,GAAG;IACtBlC,MAAM,EAAEA,MAAM,GAAG,CAACA,MAAJ,GAAa,IADL;IAEtBkB,eAAe,EAAfA,eAFsB;IAGtBiB,MAAM,EAAEnG,iBAHc;IAItB+B,SAAS,EAAEA,SAAS,GAAGA,SAAH,GAAe,IAJb;IAKtBL,KAAK,EAAEA,KAAK,GAAGA,KAAH,GAAW,IALD;IAMtBqE,WAAW,EAAXA,WANsB;IAOtBnC,QAAQ,EAARA,QAPsB;IAQtBG,UAAU,EAAVA,UARsB;IAStB/C,KAAK,EAALA,KATsB;IAUtBoF,KAAK,EAAExB,SAVe;IAWtByB,SAAS,EAAEC,QAAQ,CAACC,EAATD,KAAgB,SAXL;IAYtBE,MAAM,EAAEnC,UAAU,CAACC,OAAXD,CACN3C,KAAK,GAAG8E,MAAM,CAACC,kBAAV,GAA+BD,MAAM,CAACE,aADrCrC;EAZc,CAAxB;EAiBA,IAAMsC,GAAG,GAAGtG,gBAAgB,CAAC6F,eAAD,CAA5B;EAEA,IAAMU,UAAU,GAAGtG,gBAAgB,iCAAM4F,eAAN;IAAuBS,GAAAA,EAAAA;EAAvB,GAAnC;EAEA,IAAME,mBAAmB,GACvB,CAAC3B,eAAD,IAAoBa,WAAW,GAAGhG,gCAAlC,CADF;EAGA,IAAM+G,kBAAkB,GAAGvD,gBAAgB,GACvChD,sBAAsB,CAACyB,WAAW,CAAC+E,OAAb,EAAsBxD,gBAAtB,CADiB,GAEvCvB,WAAW,CAAC8C,WAAZ9C,CAAwBgF,QAAxBhF,GACA,CADAA,GAEA,CAJJ;EAMA,IAAMiF,gBAAgB,GAAG;IACvBC,QAAQ,EAAE,UADa;IAEvBzE,IAAI,EAAE,CAFiB;IAGvB0E,iBAAiB,EAAE1D;EAHI,CAAzB;EAMA,IAAM2D,UAAU,GAAG;IACjBpG,KAAK,EAALA,KADiB;IAEjBsB,oBAAoB,EAApBA,oBAFiB;IAGjBwE,kBAAkB,EAAlBA,kBAHiB;IAIjB7F,KAAK,EAALA,KAJiB;IAKjBgG,gBAAgB,EAAhBA,gBALiB;IAMjBJ,mBAAmB,EAAnBA,mBANiB;IAOjB1B,mBAAmB,EAAnBA,mBAPiB;IAQjBhC,IAAI,EAAJA,IARiB;IASjBS,QAAQ,EAARA,QATiB;IAUjBG,UAAU,EAAVA,UAViB;IAWjBD,UAAU,EAAVA,UAXiB;IAYjBa,UAAU,EAAVA,UAZiB;IAajB0C,aAAa,EAAExH,qBAbE;IAcjBkG,WAAW,EAAXA,WAdiB;IAejBxC,gBAAgB,EAAhBA,gBAfiB;IAgBjBiB,WAAW,EAAXA,WAhBiB;IAiBjBC,gBAAgB,EAAhBA,gBAjBiB;IAkBjBR,eAAe,EAAEA,eAlBA;IAmBjBS,UAAU,EAAVA,UAnBiB;IAoBjBY,uBAAuB,EAAvBA,uBApBiB;IAqBjBpC,SAAS,EAATA,SArBiB;IAsBjBoE,qBAAqB,EAAExE,IAAI,CAACwE,qBAtBX;IAuBjB1E,MAAM,EAANA,MAvBiB;IAwBjBC,YAAAA,EAAAA;EAxBiB,CAAnB;EA2BA,IAAM0E,SAAS,GAAIvD,MAAM,KACtBtC,KAAK,GAAGzB,yBAAH,GAA+ByD,UADd,CAAzB;EAGA,IAAM8D,cAAc,GAClB1B,WAAW,IACV,CAAC9B,MAAD,GAAWtC,KAAK,GAAGxB,uBAAuB,GAAG,CAA7B,GAAiCF,iBAAjD,GAAsE,CAD5D,CADb;EAIA,IAAQyH,UAAR,GAAoCzF,WAApC,CAAQyF,UAAR;EAAA,IAAoBC,WAApB,GAAoC1F,WAApC,CAAoB0F,WAApB;EAEA,IAAMC,oBAAoB,GAAGnH,wCAAwC,CAAC;IACpEwD,MAAM,EAAEwD,cAD4D;IAEpEI,WAAW,EAAEH,UAAU,CAACzD,MAAXyD,IAAqB,CAFkC;IAGpEI,YAAY,EAAE,CAAC9H;EAHqD,CAAD,CAArE;EAMA,IAAM+H,qBAAqB,GAAGtH,wCAAwC,CAAC;IACrEwD,MAAM,EAAEwD,cAD6D;IAErEI,WAAW,EAAEF,WAAW,CAAC1D,MAAZ0D,IAAsB,CAFkC;IAGrEG,YAAY,EAAE,CAAC9H;EAHsD,CAAD,CAAtE;EAKA,IAAMgI,eAAe,GAAGvH,wCAAwC,CAAC;IAC/DwD,MAAM,EAAEwD,cADuD;IAE/DI,WAAW,EAAE9H,cAFkD;IAG/D+H,YAAY,EAAE,CAAC9H;EAHgD,CAAD,CAAhE;EAMA,IAAMiI,eAAe,GAAGtF,KAAK,GACzBgF,WAAW,CAAC3C,KAAZ2C,IAAqB5H,cADI,GAEzBA,cAFJ;EAIA,IAAMmI,cAAc,GAAGxF,IAAI,GACvBgF,UAAU,CAAC1C,KAAX0C,IAAoB3H,cADG,GAEvBA,cAFJ;EAIA,IAAMoI,sCAAsC,GAC1CxI,yCAAyC,CAAC;IACxCqD,eAAe,EAAfA,eADwC;IAExCiF,eAAe,EAAfA,eAFwC;IAGxCC,cAAc,EAAdA,cAHwC;IAIxCE,IAAI,EAAE,UAJkC;IAKxClF,IAAAA,EAAAA;EALwC,CAAD,CAD3C;EAQA,IAAMmF,gBAAgB,+DACnB7I,aAAa,CAACoG,IADK,EACEgC,oBADF,sCAEnBpI,aAAa,CAAC8I,KAFK,EAEGP,qBAFH,qBAAtB;EAIA,IAAMQ,aAAa,yDAChB/I,aAAa,CAACoG,IADE,EACKpD,uBADL,mCAEhBhD,aAAa,CAAC8I,KAFE,EAEM7F,wBAFN,kBAAnB;EAKA,IAAI+F,cAAuC,GAAG;IAC5CxF,eAAe,EAAfA,eAD4C;IAE5CZ,UAAU,EAAVA,UAF4C;IAG5C4D,WAAW,oDACRzG,aAAa,CAACsG,IADN,EACamC,eADb,iCAERzI,aAAa,CAACkJ,KAFN,EAEcJ,gBAFd,gBAHiC;IAO5CE,aAAa,EAAbA,aAP4C;IAQ5CG,kBAAkB,EAAEzG,WAAW,CAACwB,OARY;IAS5C8D,qBAAqB,EAAExE,IAAI,CAACwE;EATgB,CAA9C;;EAWA,IAAIvE,eAAe,CAAC2F,MAApB,EAA4B;IAC1BH,cAAc,mCACTA,cADS;MAEZ9F,IAAI,EAAJA,IAFY;MAGZC,KAAK,EAALA,KAHY;MAIZiG,SAAS,kCAAOxF,IAAP;QAAaS,QAAQ,EAARA,QAAb;QAAuBG,UAAU,EAAVA,UAAvB;QAAmCD,UAAAA,EAAAA;MAAnC,EAJG;MAKZ8E,OAAO,EAAE5G,WAAW,CAAC+E;IALT,EAAdwB;EAOF;;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;IAAC,KAAK,EAAEnE;EAAR,CAAL,EAME,KAAA,CAAA,aAAA,CAAC,OAAD,EAAQ;IACN,IAAI,EAAEnB,IADA;IAEN,KAAK,EAAEzB,YAFD;IAGN,SAAS,EAAE0B,SAHL;IAIN,gBAAgB,EAAEK,gBAJZ;IAKN,OAAO,EAAEvB,WAAW,CAACwB,OALf;IAMN,WAAW,EAAEgB,WANP;IAON,YAAY,EAAEnD,YAPR;IAQN,eAAe,EAAE4C;EARX,CAAR,CANF,EAgBE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK,IAAL,EACE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;IACH,KAAK,EAAE,CACLuC,MAAM,CAACqC,cADF,EAEL;MACEC,UAAU,EAAE9I,iBADd;MAEEuH,SAAAA,EAAAA;IAFF,CAFK;EADJ,CAAL,EASE,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;IACT,WAAW,EAAEvF,WADJ;IAET,UAAU,EAAEoF,UAFH;IAGT,eAAe,EAAExG,eAHR;IAIT,qBAAqB,EAAEkC,IAAI,CAACwE;EAJnB,CAAX,CATF,EAeGzF,MAAM,KAAA,IAANA,IAAAA,MAAM,KAAA,KAAA,CAANA,GAAM,KAAA,CAANA,GAAAA,MAAM;IACLe,MAAM,EAANA;EADK,GAEFE,IAFE;IAGLiG,GAAG,EAAE9G,QAHA;IAILI,YAAY,EAAZA,YAJK;IAKL2G,WAAW,EAAEhI,KAAK,GAAGgB,WAAW,CAACgH,WAAf,GAA6BlG,IAAI,CAACkG,WAL/C;IAMLrG,oBAAoB,EAAEA,oBAAoB,IAAI8B,gBANzC;IAOL1D,QAAQ,EAAE,CAACD,QAAD,IAAaC,QAPlB;IAQLG,cAAc,EACZ,OAAOA,cAAP,KAA0B,WAA1B,GACIsD,WADJ,GAEItD,cAXD;IAYLgB,OAAO,EAAPA,OAZK;IAaLE,MAAM,EAANA,MAbK;IAcL6G,qBAAqB,EAAE,aAdlB;IAeLlH,SAAS,EAATA,SAfK;IAgBLJ,KAAK,EAAE,CACL6E,MAAM,CAAC0C,KADF,EAEL,CAACnH,SAAD,IAAeA,SAAS,IAAIiC,MAA5B,GACI;MAAEA,MAAM,EAAE8B;IAAV,CADJ,GAEI,EAJC,EAKLc,UALK,kCAOAzD,IAPA;MAQHS,QAAQ,EAARA,QARG;MASHG,UAAU,EAAVA,UATG;MAUHD,UAAU,EAAVA,UAVG;MAWHqF,KAAK,EAAE5E,cAXJ;MAYH6E,iBAAiB,EAAErH,SAAS,GAAG,KAAH,GAAW,QAZpC;MAaHoC,SAAS,EAAEA,SAAS,GAChBA,SADgB,GAEhBiB,WAAW,CAAC1E,YAAZ0E,GAA2BC,KAA3BD,GACA,OADAA,GAEA,MAjBD;MAkBH+B,iBAAiB,EAAE1D;IAlBhB,IAoBL6C,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyB;MAAE+C,OAAO,EAAE;IAAX,CApBpB,EAqBLnB,sCArBK,EAsBLrF,YAtBK;EAhBF,GAfT,CADF,EA0DE,KAAA,CAAA,aAAA,CAAC,kBAAD,EAAwB0F,cAAxB,CA1DF,CAhBF,CADF;AA+ED,CAlUD;;AAoUA,eAAe1H,iBAAf;;AAaA,IAAMyI,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA;EAAA,IACdrG,IADc,GASD,KATC,CACdA,IADc;EAAA,IAEduB,WAFc,GASD,KATC,CAEdA,WAFc;EAAA,IAGdP,eAHc,GASD,KATC,CAGdA,eAHc;EAAA,IAIdV,gBAJc,GASD,KATC,CAIdA,gBAJc;EAAA,IAKdC,OALc,GASD,KATC,CAKdA,OALc;EAAA,IAMdnC,YANc,GASD,KATC,CAMdA,YANc;EAAA,IAOd6B,SAPc,GASD,KATC,CAOdA,SAPc;EAAA,IAQdvB,KARc,GASD,KATC,CAQdA,KARc;EASD,OACb,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;IACH,MAAM,EAAC,oBADJ;IAEH,aAAa,EAAC,MAFX;IAGH,KAAK,EAAE,CACL6E,MAAM,CAAC6C,OADF,EAGL;MACEpF,eAAe,EAAfA,eADF;MAEEsF,YAAY,EAAErG,SAFhB;MAGEsG,WAAW,EAAE,CAACvG,IAAI,GAAGM,gBAAH,GAAsBC,OAA3B,IAAsC,CAAtC,GAA0C,CAHzD;MAIEiG,WAAW,EAAElG,gBAAgB,GAAGiB,WAAH,GAAiBnD;IAJhD,CAHK,EASLM,KATK;EAHJ,CAAL,CADa;AAgBd,CAzBD;;AA2BA,IAAM6E,MAAM,GAAGnC,UAAU,CAACqF,MAAXrF,CAAkB;EAC/BgF,OAAO,EAAE;IACPnC,QAAQ,EAAE,UADH;IAEPzE,IAAI,EAAE,CAFC;IAGPC,KAAK,EAAE,CAHA;IAIPiH,GAAG,EAAE,CAJE;IAKPC,MAAM,EAAE;EALD,CADsB;EAQ/Bf,cAAc,EAAE;IACdgB,aAAa,EAAE;EADD,CARe;EAW/BX,KAAK,EAAE;IACLY,MAAM,EAAE,CADH;IAELC,MAAM,EAAE;EAFH,CAXwB;EAe/BrD,aAAa,EAAE;IACboC,UAAU,EAAE,CADC;IAEbe,aAAa,EAAE;EAFF,CAfgB;EAmB/BpD,kBAAkB,EAAE;IAClBqC,UAAU,EAAE,CADM;IAElBe,aAAa,EAAE;EAFG;AAnBW,CAAlBxF,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n  LABEL_PADDING_TOP_DENSE,\n} from './constants';\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  outlineStyle,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-outlined',\n  contentStyle,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const outlinedHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP) : 0);\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        style={outlineStyle}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                lineHeight,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.getConstants().isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n              contentStyle,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n  style,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n      style,\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
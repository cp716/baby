{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { getConstants } from \"../helpers\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode,\n      isV3 = _ref3.isV3;\n\n  var _getConstants = getConstants(isV3),\n      OUTLINED_INPUT_OFFSET = _getConstants.OUTLINED_INPUT_OFFSET,\n      ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, _defineProperty(_ref7, marginKey, isAffix ? 0 : offset), _defineProperty(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n      left = _ref5.left,\n      right = _ref5.right,\n      onAffixChange = _ref5.onAffixChange,\n      textStyle = _ref5.textStyle,\n      visible = _ref5.visible,\n      topPosition = _ref5.topPosition,\n      isTextInputFocused = _ref5.isTextInputFocused,\n      forceFocus = _ref5.forceFocus,\n      paddingHorizontal = _ref5.paddingHorizontal,\n      maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n          side = _ref6.side;\n      var inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          key: side,\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          key: side,\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["React","getConstants","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport { getConstants } from '../helpers';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}
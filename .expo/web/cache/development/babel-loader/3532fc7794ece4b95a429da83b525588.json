{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport firebase from 'firebase';\nimport Button from \"../components/Button\";\nimport Loading from \"../components/Loading\";\nimport { translateErrors } from \"../utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PasswordChangeScreen(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPassword = _useState2[0],\n      setCurrentPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newPassword = _useState4[0],\n      setNewPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      confirmPassword = _useState6[0],\n      setConfirmPassword = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setLoading = _useState8[1];\n\n  function handlePress() {\n    return _handlePress.apply(this, arguments);\n  }\n\n  function _handlePress() {\n    _handlePress = _asyncToGenerator(function* () {\n      setLoading(true);\n      var user = firebase.auth().currentUser;\n      var credential = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);\n\n      try {\n        yield user.reauthenticateWithCredential(credential);\n\n        if (newPassword !== confirmPassword) {\n          Alert.alert('エラー', '新しいパスワードと確認用のパスワードが一致しません。');\n          setLoading(false);\n          return;\n        }\n\n        yield user.updatePassword(newPassword);\n        Alert.alert('成功', 'パスワードが変更されました。', [{\n          text: 'OK',\n          onPress: function onPress() {\n            navigation.reset({\n              index: 0,\n              routes: [{\n                name: 'Setting'\n              }]\n            });\n          }\n        }]);\n      } catch (error) {\n        var errorMsg = error.code === 'auth/wrong-password' ? '現在のパスワードが間違っています。' : translateErrors(error.code);\n        Alert.alert('エラー', errorMsg);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return _handlePress.apply(this, arguments);\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Loading, {\n      isLoading: isLoading\n    }), _jsxs(View, {\n      style: styles.inner,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u5909\\u66F4\"\n      }), _jsx(Text, {\n        style: styles.inputText,\n        children: \"\\u73FE\\u5728\\u306E\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: currentPassword,\n        onChangeText: function onChangeText(text) {\n          setCurrentPassword(text);\n        },\n        autoCapitalize: \"none\",\n        placeholder: \"\\u73FE\\u5728\\u306E\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u3092\\u5165\\u529B\",\n        placeholderTextColor: \"#BFBFBF\",\n        secureTextEntry: true,\n        textContentType: \"password\"\n      }), _jsx(Text, {\n        style: styles.inputText,\n        children: \"\\u65B0\\u3057\\u3044\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: newPassword,\n        onChangeText: function onChangeText(text) {\n          setNewPassword(text);\n        },\n        autoCapitalize: \"none\",\n        placeholder: \"\\u65B0\\u3057\\u3044\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u3092\\u5165\\u529B\",\n        placeholderTextColor: \"#BFBFBF\",\n        secureTextEntry: true,\n        textContentType: \"password\"\n      }), _jsx(Text, {\n        style: styles.inputText,\n        children: \"\\u65B0\\u3057\\u3044\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\uFF08\\u78BA\\u8A8D\\uFF09\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: confirmPassword,\n        onChangeText: function onChangeText(text) {\n          setConfirmPassword(text);\n        },\n        autoCapitalize: \"none\",\n        placeholder: \"\\u65B0\\u3057\\u3044\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u3092\\u518D\\u5165\\u529B\",\n        placeholderTextColor: \"#BFBFBF\",\n        secureTextEntry: true,\n        textContentType: \"password\"\n      }), _jsx(Button, {\n        label: \"\\u78BA\\u8A8D\",\n        onPress: handlePress\n      }), _jsx(View, {\n        style: styles.footer,\n        children: _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            navigation.navigate('PasswordResetRequest');\n          },\n          children: _jsx(Text, {\n            style: styles.footerLink,\n            children: \"\\u73FE\\u5728\\u306E\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u304C\\u4E0D\\u660E\\u306A\\u5834\\u5408\"\n          })\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F0F4F8'\n  },\n  inner: {\n    paddingHorizontal: 27,\n    paddingVertical: 24\n  },\n  inputText: {\n    fontSize: 15,\n    lineHeight: 32,\n    marginBottom: 1,\n    color: '#737373'\n  },\n  title: {\n    fontSize: 24,\n    lineHeight: 32,\n    fontWeight: 'bold',\n    marginBottom: 24\n  },\n  input: {\n    fontSize: 16,\n    height: 48,\n    borderColor: '#DDDDDD',\n    borderWidth: 1,\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 8,\n    marginBottom: 20\n  },\n  footerLink: {\n    fontSize: 16,\n    lineHeight: 24,\n    color: '#467FD3'\n  },\n  footer: {\n    marginTop: 50,\n    marginRight: 'auto',\n    marginLeft: 'auto',\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"names":["React","useState","firebase","Button","Loading","translateErrors","PasswordChangeScreen","props","navigation","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","isLoading","setLoading","handlePress","user","auth","currentUser","credential","EmailAuthProvider","email","reauthenticateWithCredential","Alert","alert","updatePassword","text","onPress","reset","index","routes","name","error","errorMsg","code","styles","container","inner","title","inputText","input","footer","navigate","footerLink","StyleSheet","create","flex","backgroundColor","paddingHorizontal","paddingVertical","fontSize","lineHeight","marginBottom","color","fontWeight","height","borderColor","borderWidth","marginTop","marginRight","marginLeft","flexDirection"],"sources":["/Users/atsushi/Dev/baby/src/screens/PasswordChangeScreen.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport firebase from 'firebase';\n\nimport Button from '../components/Button';\nimport Loading from '../components/Loading';\nimport { translateErrors } from '../utils';\n\nexport default function PasswordChangeScreen(props) {\n    const { navigation } = props;\n    const [currentPassword, setCurrentPassword] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n    const [isLoading, setLoading] = useState(false);\n\n    async function handlePress() {\n        setLoading(true);\n\n        const user = firebase.auth().currentUser;\n        \n        // 現在のパスワードでユーザーを再認証\n        const credential = firebase.auth.EmailAuthProvider.credential(user.email, currentPassword);\n        \n        try {\n            await user.reauthenticateWithCredential(credential);\n            \n            // 新しいパスワードと確認用のパスワードが一致しない場合、エラーを表示\n            if (newPassword !== confirmPassword) {\n                Alert.alert('エラー', '新しいパスワードと確認用のパスワードが一致しません。');\n                setLoading(false);\n                return;\n            }\n\n            // パスワードの変更を試行\n            await user.updatePassword(newPassword);\n\n            Alert.alert('成功', 'パスワードが変更されました。', [\n                {\n                    text: 'OK',\n                    onPress: () => {\n                        navigation.reset({\n                            index: 0,\n                            routes: [{ name: 'Setting' }],\n                        });\n                    },\n                },\n            ]);\n        } catch (error) {\n            // パスワードが間違っている場合のエラーメッセージを設定\n            const errorMsg = error.code === 'auth/wrong-password' ? '現在のパスワードが間違っています。' : translateErrors(error.code);\n            Alert.alert('エラー', errorMsg);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <Loading isLoading={isLoading} />\n            <View style={styles.inner}>\n                <Text style={styles.title}>パスワード変更</Text>\n                <Text style={styles.inputText}>現在のパスワード</Text>\n                <TextInput\n                    style={styles.input}\n                    value={currentPassword}\n                    onChangeText={(text) => { setCurrentPassword(text); }}\n                    autoCapitalize=\"none\"\n                    placeholder=\"現在のパスワードを入力\"\n                    placeholderTextColor=\"#BFBFBF\"\n                    secureTextEntry\n                    textContentType=\"password\"\n                />\n                <Text style={styles.inputText}>新しいパスワード</Text>\n                <TextInput\n                    style={styles.input}\n                    value={newPassword}\n                    onChangeText={(text) => { setNewPassword(text); }}\n                    autoCapitalize=\"none\"\n                    placeholder=\"新しいパスワードを入力\"\n                    placeholderTextColor=\"#BFBFBF\"\n                    secureTextEntry\n                    textContentType=\"password\"\n                />\n                <Text style={styles.inputText}>新しいパスワード（確認）</Text>\n                <TextInput\n                    style={styles.input}\n                    value={confirmPassword}\n                    onChangeText={(text) => { setConfirmPassword(text); }}\n                    autoCapitalize=\"none\"\n                    placeholder=\"新しいパスワードを再入力\"\n                    placeholderTextColor=\"#BFBFBF\"\n                    secureTextEntry\n                    textContentType=\"password\"\n                />\n                <Button\n                    label=\"確認\"\n                    onPress={handlePress}\n                />\n                <View style={styles.footer}>\n                    <TouchableOpacity onPress={() => { navigation.navigate('PasswordResetRequest'); }}>\n                        <Text style={styles.footerLink}>現在のパスワードが不明な場合</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#F0F4F8',\n    },\n    inner: {\n        paddingHorizontal: 27,\n        paddingVertical: 24,\n    },\n    inputText: {\n        fontSize: 15,\n        lineHeight: 32,\n        marginBottom: 1,\n        color: '#737373',\n    },\n    title: {\n        fontSize: 24,\n        lineHeight: 32,\n        fontWeight: 'bold',\n        marginBottom: 24,\n    },\n    input: {\n        fontSize: 16,\n        height: 48,\n        borderColor: '#DDDDDD',\n        borderWidth: 1,\n        backgroundColor: '#ffffff',\n        paddingHorizontal: 8,\n        marginBottom: 20,\n    },\n    footerLink: {\n        fontSize: 16,\n        lineHeight: 24,\n        color: '#467FD3',\n    },\n    footer: {\n        marginTop: 50,\n        marginRight: 'auto',\n        marginLeft: 'auto',\n        flexDirection: 'row'\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
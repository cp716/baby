{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"closeIconAccessibilityLabel\", \"onPress\", \"onLongPress\", \"delayLongPress\", \"onClose\", \"closeIcon\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\", \"showSelectedOverlay\", \"ellipsizeMode\", \"compact\", \"elevated\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport Icon from \"../Icon\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getChipColors } from \"./helpers\";\n\nvar Chip = function Chip(_ref) {\n  var _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'flat' : _ref$mode,\n      children = _ref.children,\n      icon = _ref.icon,\n      avatar = _ref.avatar,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,\n      closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      delayLongPress = _ref.delayLongPress,\n      onClose = _ref.onClose,\n      closeIcon = _ref.closeIcon,\n      textStyle = _ref.textStyle,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      selectedColor = _ref.selectedColor,\n      _ref$showSelectedOver = _ref.showSelectedOverlay,\n      showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,\n      ellipsizeMode = _ref.ellipsizeMode,\n      compact = _ref.compact,\n      _ref$elevated = _ref.elevated,\n      elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = theme.isV3;\n\n  var _React$useRef = React.useRef(new Animated.Value(isV3 && elevated ? 1 : 0)),\n      elevation = _React$useRef.current;\n\n  var isOutlined = mode === 'outlined';\n\n  var handlePressIn = function handlePressIn() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: isV3 ? elevated ? 2 : 0 : 4,\n      duration: 200 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var handlePressOut = function handlePressOut() {\n    var scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var opacity = isV3 ? 0.38 : 0.26;\n  var defaultBorderRadius = isV3 ? 8 : 16;\n  var iconSize = isV3 ? 18 : 16;\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      customBackgroundColor = _ref2.backgroundColor,\n      _ref2$borderRadius = _ref2.borderRadius,\n      borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;\n\n  var _getChipColors = getChipColors({\n    isOutlined: isOutlined,\n    theme: theme,\n    selectedColor: selectedColor,\n    showSelectedOverlay: showSelectedOverlay,\n    customBackgroundColor: customBackgroundColor,\n    disabled: disabled\n  }),\n      borderColor = _getChipColors.borderColor,\n      textColor = _getChipColors.textColor,\n      iconColor = _getChipColors.iconColor,\n      underlayColor = _getChipColors.underlayColor,\n      selectedBackgroundColor = _getChipColors.selectedBackgroundColor,\n      backgroundColor = _getChipColors.backgroundColor;\n\n  var accessibilityState = {\n    selected: selected,\n    disabled: disabled\n  };\n  var elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;\n  var labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier\n  };\n  var contentSpacings = {\n    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4\n  };\n\n  var labelTextStyle = _objectSpread({\n    color: textColor\n  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);\n\n  return React.createElement(Surface, _extends({\n    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {\n      elevation: elevationStyle\n    }, {\n      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n      borderColor: borderColor,\n      borderRadius: borderRadius\n    }, style]\n  }, theme.isV3 && {\n    elevation: elevationStyle\n  }, rest), React.createElement(TouchableRipple, {\n    borderless: true,\n    style: [{\n      borderRadius: borderRadius\n    }, styles.touchable],\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    delayLongPress: delayLongPress,\n    underlayColor: underlayColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: accessibilityState,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, isV3 && styles.md3Content, contentSpacings]\n  }, avatar && !icon ? React.createElement(View, {\n    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {\n      opacity: opacity\n    }]\n  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n    style: [styles.avatar, avatar.props.style]\n  }) : avatar) : null, icon || selected ? React.createElement(View, {\n    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    color: avatar ? white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,\n    size: 18\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: \"check\",\n    color: avatar ? white : iconColor,\n    size: 18,\n    direction: \"ltr\"\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],\n    ellipsizeMode: ellipsizeMode\n  }, children))), onClose ? React.createElement(View, {\n    style: styles.closeButtonStyle\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: onClose,\n    accessibilityRole: \"button\",\n    accessibilityLabel: closeIconAccessibilityLabel\n  }, React.createElement(View, {\n    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]\n  }, closeIcon ? React.createElement(Icon, {\n    source: closeIcon,\n    color: iconColor,\n    size: iconSize\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isV3 ? 'close' : 'close-circle',\n    size: iconSize,\n    color: iconColor,\n    direction: \"ltr\"\n  })))) : null);\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({\n      default: 'column',\n      web: 'row'\n    })\n  },\n  md3OutlineContainer: {\n    borderWidth: 1\n  },\n  md3FlatContainer: {\n    borderWidth: 0\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1\n  },\n  md3Content: {\n    paddingLeft: 0\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center'\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0\n  },\n  closeIcon: {\n    marginRight: 4\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  touchable: {\n    flexGrow: 1\n  }\n});\nexport default withInternalTheme(Chip);","map":{"version":3,"sources":["Chip.tsx"],"names":["React","withInternalTheme","white","Icon","MaterialCommunityIcon","Surface","TouchableRipple","Text","getChipColors","Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","delayLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","showSelectedOverlay","ellipsizeMode","compact","elevated","rest","isV3","current","elevation","useRef","Animated","Value","isOutlined","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","opacity","defaultBorderRadius","iconSize","backgroundColor","customBackgroundColor","borderRadius","StyleSheet","flatten","borderColor","textColor","iconColor","underlayColor","selectedBackgroundColor","accessibilityState","elevationStyle","Platform","OS","multiplier","labelSpacings","marginRight","marginLeft","contentSpacings","paddingRight","labelTextStyle","color","fonts","labelLarge","regular","styles","container","md3OutlineContainer","md3FlatContainer","touchable","content","md3Content","avatarWrapper","md3AvatarWrapper","isValidElement","cloneElement","props","md3Icon","avatarSelected","md3SelectedIcon","colors","primary","md3LabelText","labelText","closeButtonStyle","md3CloseIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  GestureResponderEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { EllipsizeProp, InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getChipColors } from './helpers';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether to display overlay on selected chip\n   */\n  showSelectedOverlay?: boolean;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Sets smaller horizontal paddings `12dp` around label, when there is only label.\n   */\n  compact?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether chip should have the elevation.\n   */\n  elevated?: boolean;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\n   */\n  delayLongPress?: number;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  delayLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  showSelectedOverlay = false,\n  ellipsizeMode,\n  compact,\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(isV3 && elevated ? 1 : 0)\n  );\n\n  const isOutlined = mode === 'outlined';\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 ? (elevated ? 2 : 0) : 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: isV3 && elevated ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const opacity = isV3 ? 0.38 : 0.26;\n  const defaultBorderRadius = isV3 ? 8 : 16;\n  const iconSize = isV3 ? 18 : 16;\n\n  const {\n    backgroundColor: customBackgroundColor,\n    borderRadius = defaultBorderRadius,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const {\n    borderColor,\n    textColor,\n    iconColor,\n    underlayColor,\n    selectedBackgroundColor,\n    backgroundColor,\n  } = getChipColors({\n    isOutlined,\n    theme,\n    selectedColor,\n    showSelectedOverlay,\n    customBackgroundColor,\n    disabled,\n  });\n\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  const elevationStyle = isV3 || Platform.OS === 'android' ? elevation : 0;\n  const multiplier = isV3 ? (compact ? 1.5 : 2) : 1;\n  const labelSpacings = {\n    marginRight: onClose ? 0 : 8 * multiplier,\n    marginLeft: avatar || icon || selected ? 4 * multiplier : 8 * multiplier,\n  };\n  const contentSpacings = {\n    paddingRight: isV3 ? (onClose ? 34 : 0) : onClose ? 32 : 4,\n  };\n  const labelTextStyle = {\n    color: textColor,\n    ...(isV3 ? theme.fonts.labelLarge : theme.fonts.regular),\n  };\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          isV3 &&\n            (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer),\n          !theme.isV3 && {\n            elevation: elevationStyle,\n          },\n          {\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...(theme.isV3 && { elevation: elevationStyle })}\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        onLongPress={onLongPress}\n        delayLongPress={delayLongPress}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View\n          style={[styles.content, isV3 && styles.md3Content, contentSpacings]}\n        >\n          {avatar && !icon ? (\n            <View\n              style={[\n                styles.avatarWrapper,\n                isV3 && styles.md3AvatarWrapper,\n                disabled && { opacity },\n              ]}\n            >\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar as React.ReactElement<any>, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                isV3 && styles.md3Icon,\n                avatar\n                  ? [\n                      styles.avatar,\n                      styles.avatarSelected,\n                      isV3 && selected && styles.md3SelectedIcon,\n                    ]\n                  : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={\n                    avatar\n                      ? white\n                      : !disabled && theme.isV3\n                      ? theme.colors.primary\n                      : iconColor\n                  }\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              isV3 ? styles.md3LabelText : styles.labelText,\n              labelTextStyle,\n              labelSpacings,\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View\n              style={[\n                styles.icon,\n                styles.closeIcon,\n                isV3 && styles.md3CloseIcon,\n              ]}\n            >\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={iconSize} />\n              ) : (\n                <MaterialCommunityIcon\n                  name={isV3 ? 'close' : 'close-circle'}\n                  size={iconSize}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  md3OutlineContainer: {\n    borderWidth: 1,\n  },\n  md3FlatContainer: {\n    borderWidth: 0,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  md3Content: {\n    paddingLeft: 0,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  md3Icon: {\n    paddingLeft: 8,\n    paddingRight: 0,\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  md3CloseIcon: {\n    marginRight: 8,\n    padding: 0,\n  },\n  labelText: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  md3LabelText: {\n    textAlignVertical: 'center',\n    marginVertical: 6,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  md3AvatarWrapper: {\n    marginLeft: 4,\n    marginRight: 0,\n  },\n  md3SelectedIcon: {\n    paddingLeft: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withInternalTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../../core/theming\";\nimport { getConstants } from \"../helpers\";\nimport { AdornmentSide } from \"./enums\";\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n      side = _ref.side,\n      textStyle = _ref.textStyle,\n      topPosition = _ref.topPosition,\n      onLayout = _ref.onLayout,\n      visible = _ref.visible,\n      paddingHorizontal = _ref.paddingHorizontal,\n      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,\n      testID = _ref.testID;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier,\n      testID: testID\n    }\n  }, affix);\n};\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var _theme$colors;\n\n  var text = _ref2.text,\n      labelStyle = _ref2.textStyle,\n      theme = _ref2.theme;\n\n  var _getConstants = getConstants(theme.isV3),\n      AFFIX_OFFSET = _getConstants.AFFIX_OFFSET;\n\n  var _React$useContext = React.useContext(AffixContext),\n      textStyle = _React$useContext.textStyle,\n      onLayout = _React$useContext.onLayout,\n      topPosition = _React$useContext.topPosition,\n      side = _React$useContext.side,\n      visible = _React$useContext.visible,\n      paddingHorizontal = _React$useContext.paddingHorizontal,\n      maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier,\n      testID = _React$useContext.testID;\n\n  var textColor = color(theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout,\n    testID: testID\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withInternalTheme(TextInputAffix);\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"sources":["TextInputAffix.tsx"],"names":["React","color","withInternalTheme","getConstants","AdornmentSide","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","TextInputAffix","text","labelStyle","theme","AFFIX_OFFSET","isV3","useContext","textColor","colors","onSurface","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../../core/theming';\nimport type { InternalTheme } from '../../../types';\nimport { getConstants } from '../helpers';\nimport { AdornmentSide } from './enums';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  testID,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n        testID,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n  } = React.useContext(AffixContext);\n\n  const textColor = color(\n    theme.isV3 ? theme.colors.onSurface : theme.colors?.text\n  )\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n      testID={testID}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withInternalTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}
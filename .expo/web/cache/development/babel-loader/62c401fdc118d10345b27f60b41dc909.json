{"ast":null,"code":"export function addEventListener(Module) {\n  var _Module$addEventListe;\n\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  var eventName = rest[0],\n      handler = rest[1];\n  var removed = false;\n  var subscription = (_Module$addEventListe = Module.addEventListener(eventName, handler)) !== null && _Module$addEventListe !== void 0 ? _Module$addEventListe : {\n    remove: function remove() {\n      var _Module$removeEventLi, _Module$remove;\n\n      if (removed) {\n        return;\n      }\n\n      (_Module$removeEventLi = Module.removeEventListener) === null || _Module$removeEventLi === void 0 ? void 0 : _Module$removeEventLi.call(Module, eventName, handler);\n      (_Module$remove = Module.remove) === null || _Module$remove === void 0 ? void 0 : _Module$remove.call(Module, eventName, handler);\n      removed = true;\n    }\n  };\n  return subscription;\n}\nexport function addListener(Module) {\n  var _Module$addListener;\n\n  for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    rest[_key2 - 1] = arguments[_key2];\n  }\n\n  var eventName = rest[0],\n      handler = rest[1];\n  var removed = false;\n  var subscription = (_Module$addListener = Module.addListener(eventName, handler)) !== null && _Module$addListener !== void 0 ? _Module$addListener : {\n    remove: function remove() {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener(eventName, handler);\n      removed = true;\n    }\n  };\n  return subscription;\n}","map":{"version":3,"sources":["addEventListener.tsx"],"names":["addEventListener","Module","rest","eventName","handler","removed","subscription","remove","removeEventListener","addListener"],"mappings":"AAKA,OAAO,SAASA,gBAAT,CAQLC,MARK,EAQ2D;EAAA,IAAA,qBAAA;;EAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAlDC,IAAI,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAA8C,EAA9C,IAAA,GAAA,CAA8C,EAA9C,IAAA,GAAA,IAA8C,EAA9C,IAAA,EAA8C,EAA9C;IAAJA,IAAI,CAAA,IAAA,GAAA,CAAA,CAAJA,GAAI,SAAA,CAAA,IAAA,CAAJA;EAAI;;EAClB,IAAOC,SAAP,GAA6BD,IAA7B;EAAA,IAAkBE,OAAlB,GAA6BF,IAA7B;EAEA,IAAIG,OAAO,GAAG,KAAd;EAEA,IAAMC,YAAY,GAAA,CAAA,qBAAA,GAAGL,MAAM,CAACD,gBAAPC,CAAwBE,SAAxBF,EAAmCG,OAAnCH,CAAH,MAA8C,IAA9C,IAA8C,qBAAA,KAAA,KAAA,CAA9C,GAA8C,qBAA9C,GAAkD;IAClEM,MAAM,EAAE,kBAAM;MAAA,IAAA,qBAAA,EAAA,cAAA;;MACZ,IAAIF,OAAJ,EAAa;QACX;MACF;;MAEA,CAAA,qBAAA,GAAA,MAAM,CAACG,mBAAP,MAA0B,IAA1B,IAA0B,qBAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAAA,qBAAA,CAAA,IAAA,CAAA,MAAA,EAA6BL,SAA7B,EAAwCC,OAAxC,CAAA;MACA,CAAA,cAAA,GAAA,MAAM,CAACG,MAAP,MAAa,IAAb,IAAa,cAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,cAAA,CAAA,IAAA,CAAA,MAAA,EAAgBJ,SAAhB,EAA2BC,OAA3B,CAAA;MACAC,OAAO,GAAG,IAAVA;IACF;EATkE,CAApE;EAYA,OAAOC,YAAP;AACF;AAEA,OAAO,SAASG,WAAT,CAKLR,MALK,EAKsD;EAAA,IAAA,mBAAA;;EAAA,KAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAA7CC,IAAI,GAAA,IAAA,KAAA,CAAA,KAAA,GAAA,CAAA,GAAA,KAAA,GAAA,CAAA,GAAA,CAAA,CAAyC,EAAzC,KAAA,GAAA,CAAyC,EAAzC,KAAA,GAAA,KAAyC,EAAzC,KAAA,EAAyC,EAAzC;IAAJA,IAAI,CAAA,KAAA,GAAA,CAAA,CAAJA,GAAI,SAAA,CAAA,KAAA,CAAJA;EAAI;;EAClB,IAAOC,SAAP,GAA6BD,IAA7B;EAAA,IAAkBE,OAAlB,GAA6BF,IAA7B;EAEA,IAAIG,OAAO,GAAG,KAAd;EAEA,IAAMC,YAAY,GAAA,CAAA,mBAAA,GAAGL,MAAM,CAACQ,WAAPR,CAAmBE,SAAnBF,EAA8BG,OAA9BH,CAAH,MAAyC,IAAzC,IAAyC,mBAAA,KAAA,KAAA,CAAzC,GAAyC,mBAAzC,GAA6C;IAC7DM,MAAM,EAAE,kBAAM;MACZ,IAAIF,OAAJ,EAAa;QACX;MACF;;MAEAJ,MAAM,CAACO,mBAAPP,CAA2BE,SAA3BF,EAAsCG,OAAtCH;MACAI,OAAO,GAAG,IAAVA;IACF;EAR6D,CAA/D;EAWA,OAAOC,YAAP;AACF","sourcesContent":["import type {\n  NativeEventSubscription,\n  EmitterSubscription,\n} from 'react-native';\n\nexport function addEventListener<\n  T extends {\n    addEventListener: (\n      ...args: any\n    ) => NativeEventSubscription | EmitterSubscription;\n  } & { removeEventListener?: (...args: any) => void } & {\n    remove?: (...args: any) => void;\n  }\n>(Module: T, ...rest: Parameters<typeof Module.addEventListener>) {\n  const [eventName, handler] = rest;\n\n  let removed = false;\n\n  const subscription = Module.addEventListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener?.(eventName, handler);\n      Module.remove?.(eventName, handler);\n      removed = true;\n    },\n  };\n\n  return subscription;\n}\n\nexport function addListener<\n  T extends {\n    addListener: (...args: any) => EmitterSubscription;\n    removeEventListener: (...args: any) => void;\n  }\n>(Module: T, ...rest: Parameters<typeof Module.addListener>) {\n  const [eventName, handler] = rest;\n\n  let removed = false;\n\n  const subscription = Module.addListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener(eventName, handler);\n      removed = true;\n    },\n  };\n\n  return subscription;\n}\n"]},"metadata":{},"sourceType":"module"}
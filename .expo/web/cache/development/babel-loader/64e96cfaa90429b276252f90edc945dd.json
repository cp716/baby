{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Sharing from 'expo-sharing';\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TestScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      db = _useState6[0],\n      setDb = _useState6[1];\n\n  useEffect(function () {\n    var database = SQLite.openDatabase('DB.db');\n    setDb(database);\n    database.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS TestTable (id INTEGER PRIMARY KEY AUTOINCREMENT, text TEXT)', [], function () {\n        console.log('テーブルが作成されました');\n      }, function (error) {\n        console.error('テーブルの作成中にエラーが発生しました:', error);\n      });\n    }, function (error) {\n      console.error('データベースのオープン中にエラーが発生しました:', error);\n    });\n  }, []);\n\n  var createTable = function createTable() {};\n\n  var shareText = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        db.transaction(function (tx) {\n          tx.executeSql('SELECT * FROM TestTable', [], function (_, _ref2) {\n            var rows = _ref2.rows;\n\n            if (rows.length > 0) {\n              var data = rows._array;\n              var jsonData = JSON.stringify(data);\n              var tempFileUri = `${FileSystem.cacheDirectory}sharedData.db`;\n              FileSystem.writeAsStringAsync(tempFileUri, jsonData).then(function () {\n                Sharing.shareAsync(tempFileUri).then(function () {\n                  setMessage('データが共有されました');\n                }).catch(function (error) {\n                  setMessage('共有中にエラーが発生しました');\n                  console.error('共有中にエラーが発生しました:', error);\n                });\n              }).catch(function (error) {\n                setMessage('ファイルの保存中にエラーが発生しました');\n                console.error('ファイルの保存中にエラーが発生しました:', error);\n              });\n            } else {\n              setMessage('共有するデータがありません');\n            }\n          }, function (_, error) {\n            setMessage('データの取得中にエラーが発生しました');\n            console.error('データの取得中にエラーが発生しました:', error);\n          });\n        });\n      } catch (error) {\n        setMessage('共有中にエラーが発生しました');\n        console.error('共有中にエラーが発生しました:', error);\n      }\n    });\n\n    return function shareText() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var insertData = function insertData() {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO TestTable (text) VALUES (?)', [text], function (_, result) {\n        setMessage('データがテーブルに挿入されました');\n      }, function (_, error) {\n        setMessage('データの挿入中にエラーが発生しました');\n        console.error('データの挿入中にエラーが発生しました:', error);\n      });\n    });\n  };\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: [db ? _jsx(Text, {\n      children: \"DB\\u304C\\u4F5C\\u6210\\u3055\\u308C\\u307E\\u3057\\u305F\"\n    }) : _jsx(Text, {\n      children: \"\\u30C7\\u30FC\\u30BF\\u30D9\\u30FC\\u30B9\\u306E\\u4F5C\\u6210\\u4E2D...\"\n    }), _jsx(Text, {\n      children: message\n    }), _jsx(TextInput, {\n      style: {\n        width: 200,\n        borderColor: 'gray',\n        borderWidth: 1,\n        marginBottom: 10\n      },\n      onChangeText: setText,\n      value: text,\n      placeholder: \"\\u30C6\\u30AD\\u30B9\\u30C8\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n    }), _jsx(Button, {\n      title: \"\\u30C7\\u30FC\\u30BF\\u3092\\u5171\\u6709\",\n      onPress: shareText\n    }), _jsx(Button, {\n      title: \"\\u30C6\\u30FC\\u30D6\\u30EB\\u3092\\u4F5C\\u6210\",\n      onPress: createTable\n    }), _jsx(Button, {\n      title: \"\\u30C7\\u30FC\\u30BF\\u3092\\u633F\\u5165\",\n      onPress: insertData\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","Sharing","FileSystem","SQLite","TestScreen","text","setText","message","setMessage","db","setDb","database","openDatabase","transaction","tx","executeSql","console","log","error","createTable","shareText","_","rows","length","data","_array","jsonData","JSON","stringify","tempFileUri","cacheDirectory","writeAsStringAsync","then","shareAsync","catch","insertData","result","flex","justifyContent","alignItems","width","borderColor","borderWidth","marginBottom"],"sources":["/Users/atsushi/Dev/baby/src/screens/TestScreen.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Button, TextInput, Text } from 'react-native';\nimport * as Sharing from 'expo-sharing';\nimport * as FileSystem from 'expo-file-system';\nimport * as SQLite from 'expo-sqlite';\n\nexport default function TestScreen() {\n  const [text, setText] = useState('');\n  const [message, setMessage] = useState('');\n  const [db, setDb] = useState(null);\n\n  useEffect(() => {\n    // SQLiteデータベースを開くか作成する\n    const database = SQLite.openDatabase('DB.db');\n    setDb(database);\n\n    database.transaction(\n      (tx) => {\n        // テーブルが存在しない場合は作成\n        tx.executeSql(\n          'CREATE TABLE IF NOT EXISTS TestTable (id INTEGER PRIMARY KEY AUTOINCREMENT, text TEXT)',\n          [],\n          () => {\n            console.log('テーブルが作成されました');\n          },\n          (error) => {\n            console.error('テーブルの作成中にエラーが発生しました:', error);\n          }\n        );\n      },\n      (error) => {\n        console.error('データベースのオープン中にエラーが発生しました:', error);\n      }\n    );\n  }, []);\n\n  const createTable = () => {\n    // テーブルを作成する関数は不要なので削除\n  };\n\n  const shareText = async () => {\n    try {\n      // SQLiteテーブルからデータを取得\n      db.transaction(\n        (tx) => {\n          tx.executeSql(\n            'SELECT * FROM TestTable',\n            [],\n            (_, { rows }) => {\n              if (rows.length > 0) {\n                const data = rows._array;\n\n                // データをJSON形式に変換\n                const jsonData = JSON.stringify(data);\n\n                // テキストデータを一時的なファイルに保存\n                const tempFileUri = `${FileSystem.cacheDirectory}sharedData.db`; // .db拡張子に変更\n                FileSystem.writeAsStringAsync(tempFileUri, jsonData)\n                  .then(() => {\n                    // テキストデータを共有\n                    Sharing.shareAsync(tempFileUri)\n                      .then(() => {\n                        setMessage('データが共有されました');\n                      })\n                      .catch((error) => {\n                        setMessage('共有中にエラーが発生しました');\n                        console.error('共有中にエラーが発生しました:', error);\n                      });\n                  })\n                  .catch((error) => {\n                    setMessage('ファイルの保存中にエラーが発生しました');\n                    console.error('ファイルの保存中にエラーが発生しました:', error);\n                  });\n              } else {\n                setMessage('共有するデータがありません');\n              }\n            },\n            (_, error) => {\n              setMessage('データの取得中にエラーが発生しました');\n              console.error('データの取得中にエラーが発生しました:', error);\n            }\n          );\n        }\n      );\n    } catch (error) {\n      setMessage('共有中にエラーが発生しました');\n      console.error('共有中にエラーが発生しました:', error);\n    }\n  };\n\n  const insertData = () => {\n    // テキストをデータベースに挿入\n    db.transaction(\n      (tx) => {\n        tx.executeSql(\n          'INSERT INTO TestTable (text) VALUES (?)',\n          [text],\n          (_, result) => {\n            setMessage('データがテーブルに挿入されました');\n          },\n          (_, error) => {\n            setMessage('データの挿入中にエラーが発生しました');\n            console.error('データの挿入中にエラーが発生しました:', error);\n          }\n        );\n      }\n    );\n  };\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {db ? (\n        <Text>DBが作成されました</Text>\n      ) : (\n        <Text>データベースの作成中...</Text>\n      )}\n      <Text>{message}</Text>\n      <TextInput\n        style={{ width: 200, borderColor: 'gray', borderWidth: 1, marginBottom: 10 }}\n        onChangeText={setText}\n        value={text}\n        placeholder=\"テキストを入力してください\"\n      />\n      <Button title=\"データを共有\" onPress={shareText} />\n      <Button title=\"テーブルを作成\" onPress={createTable} />\n      <Button title=\"データを挿入\" onPress={insertData} />\n    </View>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
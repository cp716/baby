{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from \"./utils\";\n\nvar SegmentedButtonItem = function SegmentedButtonItem(_ref) {\n  var checked = _ref.checked,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      showSelectedCheck = _ref.showSelectedCheck,\n      icon = _ref.icon,\n      testID = _ref.testID,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      segment = _ref.segment,\n      _ref$density = _ref.density,\n      density = _ref$density === void 0 ? 'regular' : _ref$density;\n  var theme = useInternalTheme();\n  var checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(function () {\n    if (!showSelectedCheck) {\n      return;\n    }\n\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  var roundness = theme.roundness,\n      isV3 = theme.isV3;\n\n  var _getSegmentedButtonCo = getSegmentedButtonColors({\n    checked: checked,\n    theme: theme,\n    disabled: disabled\n  }),\n      borderColor = _getSegmentedButtonCo.borderColor,\n      textColor = _getSegmentedButtonCo.textColor,\n      borderWidth = _getSegmentedButtonCo.borderWidth,\n      backgroundColor = _getSegmentedButtonCo.backgroundColor;\n\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme: theme,\n    segment: segment\n  });\n  var rippleColor = color(textColor).alpha(0.12).rgb().string();\n  var showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  var showCheckedIcon = checked && showSelectedCheck;\n  var iconSize = isV3 ? 18 : 16;\n\n  var iconStyle = _objectSpread({\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0\n  }, label && {\n    transform: [{\n      scale: checkScale.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })\n    }]\n  });\n\n  var buttonStyle = _objectSpread({\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n\n  var paddingVertical = getSegmentedButtonDensityPadding({\n    density: density\n  });\n\n  var rippleStyle = _objectSpread({\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n\n  var labelTextStyle = _objectSpread(_objectSpread({}, !isV3 ? {\n    textTransform: 'uppercase',\n    fontWeight: '500'\n  } : theme.fonts.labelLarge), {}, {\n    color: textColor\n  });\n\n  return React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle\n  }, React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical: paddingVertical\n    }]\n  }, showCheckedIcon ? React.createElement(Animated.View, {\n    testID: testID + \"-check-icon\",\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, React.createElement(Icon, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? React.createElement(Animated.View, {\n    testID: testID + \"-icon\",\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nvar SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };","map":{"version":3,"sources":["SegmentedButtonItem.tsx"],"names":["React","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","checkScale","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","styles","button","content","undefined","StyleSheet","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme","SegmentedButton"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useInternalTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {showCheckedIcon ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View testID={`${testID}-icon`} style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { UnavailabilityError } from 'expo-modules-core';\nexport default {\n  get name() {\n    return 'ExpoSharing';\n  },\n\n  isAvailableAsync: function () {\n    var _isAvailableAsync = _asyncToGenerator(function* () {\n      if (typeof navigator === 'undefined') {\n        return false;\n      }\n\n      return !!navigator.share;\n    });\n\n    function isAvailableAsync() {\n      return _isAvailableAsync.apply(this, arguments);\n    }\n\n    return isAvailableAsync;\n  }(),\n  shareAsync: function () {\n    var _shareAsync = _asyncToGenerator(function* (url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (navigator.share) {\n        yield navigator.share(_objectSpread(_objectSpread({}, options), {}, {\n          url: url\n        }));\n      } else {\n        throw new UnavailabilityError('navigator', 'share');\n      }\n    });\n\n    function shareAsync(_x) {\n      return _shareAsync.apply(this, arguments);\n    }\n\n    return shareAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoSharing.web.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAIA,eAAe;EACb,IAAI,IAAJ,GAAQ;IACN,OAAO,aAAP;EACD,CAHY;;EAIP,gBAJO;IAAA,uDAIS;MACpB,IAAI,OAAO,SAAP,KAAqB,WAAzB,EAAsC;QACpC,OAAO,KAAP;MACD;;MAED,OAAO,CAAC,CAAC,SAAS,CAAC,KAAnB;IACD,CAVY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAWP,UAXO;IAAA,+CAWI,GAXJ,EAW2C;MAAA,IAA1B,OAA0B,uEAAF,EAAE;;MAEtD,IAAI,SAAS,CAAC,KAAd,EAAqB;QACnB,MAAM,SAAS,CAAC,KAAV,iCAAqB,OAArB;UAA8B,GAAG,EAAH;QAA9B,GAAN;MACD,CAFD,MAEO;QACL,MAAM,IAAI,mBAAJ,CAAwB,WAAxB,EAAqC,OAArC,CAAN;MACD;IACF,CAlBY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,CAAf","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\ntype ShareOptions = { title?: string; text?: string; url?: string };\n\nexport default {\n  get name(): string {\n    return 'ExpoSharing';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return !!navigator.share;\n  },\n  async shareAsync(url: string, options: ShareOptions = {}): Promise<void> {\n    // NOTE: `navigator.share` is only available via HTTPS\n    if (navigator.share) {\n      await navigator.share({ ...options, url });\n    } else {\n      throw new UnavailabilityError('navigator', 'share');\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
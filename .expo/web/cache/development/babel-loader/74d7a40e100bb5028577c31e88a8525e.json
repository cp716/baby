{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExponentFileSystem from \"./ExponentFileSystem\";\nimport { EncodingType, FileSystemSessionType, FileSystemUploadType } from \"./FileSystem.types\";\n\nif (!ExponentFileSystem) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\n\nvar _unused = new EventEmitter(ExponentFileSystem);\n\nexport { EncodingType, FileSystemSessionType, FileSystemUploadType };\n\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n\n  return null;\n}\n\nexport var documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport var cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nvar bundledAssets = ExponentFileSystem.bundledAssets,\n    bundleDirectory = ExponentFileSystem.bundleDirectory;\nexport { bundledAssets, bundleDirectory };\nexport function getInfoAsync(_x) {\n  return _getInfoAsync.apply(this, arguments);\n}\n\nfunction _getInfoAsync() {\n  _getInfoAsync = _asyncToGenerator(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ExponentFileSystem.getInfoAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n    }\n\n    return yield ExponentFileSystem.getInfoAsync(fileUri, options);\n  });\n  return _getInfoAsync.apply(this, arguments);\n}\n\nexport function readAsStringAsync(_x2, _x3) {\n  return _readAsStringAsync.apply(this, arguments);\n}\n\nfunction _readAsStringAsync() {\n  _readAsStringAsync = _asyncToGenerator(function* (fileUri, options) {\n    if (!ExponentFileSystem.readAsStringAsync) {\n      throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n    }\n\n    return yield ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n  });\n  return _readAsStringAsync.apply(this, arguments);\n}\n\nexport function getContentUriAsync(_x4) {\n  return _getContentUriAsync.apply(this, arguments);\n}\n\nfunction _getContentUriAsync() {\n  _getContentUriAsync = _asyncToGenerator(function* (fileUri) {\n    if (Platform.OS === 'android') {\n      if (!ExponentFileSystem.getContentUriAsync) {\n        throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n      }\n\n      return yield ExponentFileSystem.getContentUriAsync(fileUri);\n    } else {\n      return new Promise(function (resolve, reject) {\n        resolve(fileUri);\n      });\n    }\n  });\n  return _getContentUriAsync.apply(this, arguments);\n}\n\nexport function writeAsStringAsync(_x5, _x6) {\n  return _writeAsStringAsync.apply(this, arguments);\n}\n\nfunction _writeAsStringAsync() {\n  _writeAsStringAsync = _asyncToGenerator(function* (fileUri, contents) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExponentFileSystem.writeAsStringAsync) {\n      throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n    }\n\n    return yield ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n  });\n  return _writeAsStringAsync.apply(this, arguments);\n}\n\nexport function deleteAsync(_x7) {\n  return _deleteAsync.apply(this, arguments);\n}\n\nfunction _deleteAsync() {\n  _deleteAsync = _asyncToGenerator(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ExponentFileSystem.deleteAsync) {\n      throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n    }\n\n    return yield ExponentFileSystem.deleteAsync(fileUri, options);\n  });\n  return _deleteAsync.apply(this, arguments);\n}\n\nexport function deleteLegacyDocumentDirectoryAndroid() {\n  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);\n}\n\nfunction _deleteLegacyDocumentDirectoryAndroid() {\n  _deleteLegacyDocumentDirectoryAndroid = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android' || documentDirectory == null) {\n      return;\n    }\n\n    var legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n    return yield deleteAsync(legacyDocumentDirectory, {\n      idempotent: true\n    });\n  });\n  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);\n}\n\nexport function moveAsync(_x8) {\n  return _moveAsync.apply(this, arguments);\n}\n\nfunction _moveAsync() {\n  _moveAsync = _asyncToGenerator(function* (options) {\n    if (!ExponentFileSystem.moveAsync) {\n      throw new UnavailabilityError('expo-file-system', 'moveAsync');\n    }\n\n    return yield ExponentFileSystem.moveAsync(options);\n  });\n  return _moveAsync.apply(this, arguments);\n}\n\nexport function copyAsync(_x9) {\n  return _copyAsync.apply(this, arguments);\n}\n\nfunction _copyAsync() {\n  _copyAsync = _asyncToGenerator(function* (options) {\n    if (!ExponentFileSystem.copyAsync) {\n      throw new UnavailabilityError('expo-file-system', 'copyAsync');\n    }\n\n    return yield ExponentFileSystem.copyAsync(options);\n  });\n  return _copyAsync.apply(this, arguments);\n}\n\nexport function makeDirectoryAsync(_x10) {\n  return _makeDirectoryAsync.apply(this, arguments);\n}\n\nfunction _makeDirectoryAsync() {\n  _makeDirectoryAsync = _asyncToGenerator(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!ExponentFileSystem.makeDirectoryAsync) {\n      throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n    }\n\n    return yield ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n  });\n  return _makeDirectoryAsync.apply(this, arguments);\n}\n\nexport function readDirectoryAsync(_x11) {\n  return _readDirectoryAsync.apply(this, arguments);\n}\n\nfunction _readDirectoryAsync() {\n  _readDirectoryAsync = _asyncToGenerator(function* (fileUri) {\n    if (!ExponentFileSystem.readDirectoryAsync) {\n      throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n    }\n\n    return yield ExponentFileSystem.readDirectoryAsync(fileUri, {});\n  });\n  return _readDirectoryAsync.apply(this, arguments);\n}\n\nexport function getFreeDiskStorageAsync() {\n  return _getFreeDiskStorageAsync.apply(this, arguments);\n}\n\nfunction _getFreeDiskStorageAsync() {\n  _getFreeDiskStorageAsync = _asyncToGenerator(function* () {\n    if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n    }\n\n    return yield ExponentFileSystem.getFreeDiskStorageAsync();\n  });\n  return _getFreeDiskStorageAsync.apply(this, arguments);\n}\n\nexport function getTotalDiskCapacityAsync() {\n  return _getTotalDiskCapacityAsync.apply(this, arguments);\n}\n\nfunction _getTotalDiskCapacityAsync() {\n  _getTotalDiskCapacityAsync = _asyncToGenerator(function* () {\n    if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n    }\n\n    return yield ExponentFileSystem.getTotalDiskCapacityAsync();\n  });\n  return _getTotalDiskCapacityAsync.apply(this, arguments);\n}\n\nexport function downloadAsync(_x12, _x13) {\n  return _downloadAsync.apply(this, arguments);\n}\n\nfunction _downloadAsync() {\n  _downloadAsync = _asyncToGenerator(function* (uri, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExponentFileSystem.downloadAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n    }\n\n    return yield ExponentFileSystem.downloadAsync(uri, fileUri, _objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND\n    }, options));\n  });\n  return _downloadAsync.apply(this, arguments);\n}\n\nexport function uploadAsync(_x14, _x15) {\n  return _uploadAsync.apply(this, arguments);\n}\n\nfunction _uploadAsync() {\n  _uploadAsync = _asyncToGenerator(function* (url, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!ExponentFileSystem.uploadAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n    }\n\n    return yield ExponentFileSystem.uploadAsync(url, fileUri, _objectSpread(_objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT\n    }, options), {}, {\n      httpMethod: (options.httpMethod || 'POST').toUpperCase()\n    }));\n  });\n  return _uploadAsync.apply(this, arguments);\n}\n\nexport function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\nexport function createUploadTask(url, fileUri, options, callback) {\n  return new UploadTask(url, fileUri, options, callback);\n}\nexport var FileSystemCancellableNetworkTask = function () {\n  function FileSystemCancellableNetworkTask() {\n    _classCallCheck(this, FileSystemCancellableNetworkTask);\n\n    this._uuid = uuidv4();\n    this.taskWasCanceled = false;\n    this.emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  _createClass(FileSystemCancellableNetworkTask, [{\n    key: \"cancelAsync\",\n    value: function () {\n      var _cancelAsync = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.networkTaskCancelAsync) {\n          throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n        }\n\n        this.removeSubscription();\n        this.taskWasCanceled = true;\n        return yield ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n      });\n\n      function cancelAsync() {\n        return _cancelAsync.apply(this, arguments);\n      }\n\n      return cancelAsync;\n    }()\n  }, {\n    key: \"isTaskCancelled\",\n    value: function isTaskCancelled() {\n      if (this.taskWasCanceled) {\n        console.warn('This task was already canceled.');\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"uuid\",\n    get: function get() {\n      return this._uuid;\n    }\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription() {\n      var _this = this;\n\n      if (this.subscription) {\n        return;\n      }\n\n      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {\n        if (event.uuid === _this.uuid) {\n          var callback = _this.getCallback();\n\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      if (!this.subscription) {\n        return;\n      }\n\n      this.emitter.removeSubscription(this.subscription);\n      this.subscription = null;\n    }\n  }]);\n\n  return FileSystemCancellableNetworkTask;\n}();\nexport var UploadTask = function (_FileSystemCancellabl) {\n  _inherits(UploadTask, _FileSystemCancellabl);\n\n  var _super = _createSuper(UploadTask);\n\n  function UploadTask(url, fileUri, options, callback) {\n    var _options$httpMethod;\n\n    var _this2;\n\n    _classCallCheck(this, UploadTask);\n\n    _this2 = _super.call(this);\n    _this2.url = url;\n    _this2.fileUri = fileUri;\n    _this2.callback = callback;\n    var httpMethod = (options == null ? void 0 : (_options$httpMethod = options.httpMethod) == null ? void 0 : _options$httpMethod.toUpperCase()) || 'POST';\n    _this2.options = _objectSpread(_objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT\n    }, options), {}, {\n      httpMethod: httpMethod\n    });\n    return _this2;\n  }\n\n  _createClass(UploadTask, [{\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.uploadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"uploadAsync\",\n    value: function () {\n      var _uploadAsync2 = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.uploadTaskStartAsync) {\n          throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return;\n        }\n\n        this.addSubscription();\n        var result = yield ExponentFileSystem.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options);\n        this.removeSubscription();\n        return result;\n      });\n\n      function uploadAsync() {\n        return _uploadAsync2.apply(this, arguments);\n      }\n\n      return uploadAsync;\n    }()\n  }]);\n\n  return UploadTask;\n}(FileSystemCancellableNetworkTask);\nexport var DownloadResumable = function (_FileSystemCancellabl2) {\n  _inherits(DownloadResumable, _FileSystemCancellabl2);\n\n  var _super2 = _createSuper(DownloadResumable);\n\n  function DownloadResumable(url, _fileUri) {\n    var _this3;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n\n    _classCallCheck(this, DownloadResumable);\n\n    _this3 = _super2.call(this);\n    _this3.url = url;\n    _this3._fileUri = _fileUri;\n    _this3.options = options;\n    _this3.callback = callback;\n    _this3.resumeData = resumeData;\n    return _this3;\n  }\n\n  _createClass(DownloadResumable, [{\n    key: \"fileUri\",\n    get: function get() {\n      return this._fileUri;\n    }\n  }, {\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.downloadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"downloadAsync\",\n    value: function () {\n      var _downloadAsync2 = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.downloadResumableStartAsync) {\n          throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return;\n        }\n\n        this.addSubscription();\n        return yield ExponentFileSystem.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData);\n      });\n\n      function downloadAsync() {\n        return _downloadAsync2.apply(this, arguments);\n      }\n\n      return downloadAsync;\n    }()\n  }, {\n    key: \"pauseAsync\",\n    value: function () {\n      var _pauseAsync = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.downloadResumablePauseAsync) {\n          throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return {\n            fileUri: this._fileUri,\n            options: this.options,\n            url: this.url\n          };\n        }\n\n        var pauseResult = yield ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n        this.removeSubscription();\n\n        if (pauseResult) {\n          this.resumeData = pauseResult.resumeData;\n          return this.savable();\n        } else {\n          throw new Error('Unable to generate a savable pause state');\n        }\n      });\n\n      function pauseAsync() {\n        return _pauseAsync.apply(this, arguments);\n      }\n\n      return pauseAsync;\n    }()\n  }, {\n    key: \"resumeAsync\",\n    value: function () {\n      var _resumeAsync = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.downloadResumableStartAsync) {\n          throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n\n        if (this.isTaskCancelled()) {\n          return;\n        }\n\n        this.addSubscription();\n        return yield ExponentFileSystem.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData);\n      });\n\n      function resumeAsync() {\n        return _resumeAsync.apply(this, arguments);\n      }\n\n      return resumeAsync;\n    }()\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this.url,\n        fileUri: this.fileUri,\n        options: this.options,\n        resumeData: this.resumeData\n      };\n    }\n  }]);\n\n  return DownloadResumable;\n}(FileSystemCancellableNetworkTask);\nvar baseReadAsStringAsync = readAsStringAsync;\nvar baseWriteAsStringAsync = writeAsStringAsync;\nvar baseDeleteAsync = deleteAsync;\nvar baseMoveAsync = moveAsync;\nvar baseCopyAsync = copyAsync;\nexport var StorageAccessFramework;\n\n(function (StorageAccessFramework) {\n  function getUriForDirectoryInRoot(folderName) {\n    return \"content://com.android.externalstorage.documents/tree/primary:\" + folderName + \"/document/primary:\" + folderName;\n  }\n\n  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n\n  function requestDirectoryPermissionsAsync() {\n    return _requestDirectoryPermissionsAsync.apply(this, arguments);\n  }\n\n  function _requestDirectoryPermissionsAsync() {\n    _requestDirectoryPermissionsAsync = _asyncToGenerator(function* () {\n      var initialFileUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n      }\n\n      return yield ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n    });\n    return _requestDirectoryPermissionsAsync.apply(this, arguments);\n  }\n\n  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n\n  function readDirectoryAsync(_x16) {\n    return _readDirectoryAsync2.apply(this, arguments);\n  }\n\n  function _readDirectoryAsync2() {\n    _readDirectoryAsync2 = _asyncToGenerator(function* (dirUri) {\n      if (!ExponentFileSystem.readSAFDirectoryAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n      }\n\n      return yield ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n    });\n    return _readDirectoryAsync2.apply(this, arguments);\n  }\n\n  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n\n  function makeDirectoryAsync(_x17, _x18) {\n    return _makeDirectoryAsync2.apply(this, arguments);\n  }\n\n  function _makeDirectoryAsync2() {\n    _makeDirectoryAsync2 = _asyncToGenerator(function* (parentUri, dirName) {\n      if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n      }\n\n      return yield ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n    });\n    return _makeDirectoryAsync2.apply(this, arguments);\n  }\n\n  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n\n  function createFileAsync(_x19, _x20, _x21) {\n    return _createFileAsync.apply(this, arguments);\n  }\n\n  function _createFileAsync() {\n    _createFileAsync = _asyncToGenerator(function* (parentUri, fileName, mimeType) {\n      if (!ExponentFileSystem.createSAFFileAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n      }\n\n      return yield ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n    });\n    return _createFileAsync.apply(this, arguments);\n  }\n\n  StorageAccessFramework.createFileAsync = createFileAsync;\n  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n  StorageAccessFramework.deleteAsync = baseDeleteAsync;\n  StorageAccessFramework.moveAsync = baseMoveAsync;\n  StorageAccessFramework.copyAsync = baseCopyAsync;\n})(StorageAccessFramework || (StorageAccessFramework = {}));","map":{"version":3,"sources":["../src/FileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  FileSystemNetworkTaskProgressCallback,\n  DownloadProgressData,\n  UploadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  FileSystemNetworkTaskProgressCallback,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function (resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport function createUploadTask(\n  url: string,\n  fileUri: string,\n  options?: FileSystemUploadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n): UploadTask {\n  return new UploadTask(url, fileUri, options, callback);\n}\n\nexport abstract class FileSystemCancellableNetworkTask<\n  T extends DownloadProgressData | UploadProgressData\n> {\n  private _uuid = uuidv4();\n  protected taskWasCanceled = false;\n  private emitter = new EventEmitter(ExponentFileSystem);\n  private subscription?: Subscription | null;\n\n  public async cancelAsync(): Promise<void> {\n    if (!ExponentFileSystem.networkTaskCancelAsync) {\n      throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n    }\n\n    this.removeSubscription();\n    this.taskWasCanceled = true;\n    return await ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n  }\n\n  protected isTaskCancelled(): boolean {\n    if (this.taskWasCanceled) {\n      console.warn('This task was already canceled.');\n      return true;\n    }\n\n    return false;\n  }\n\n  protected get uuid(): string {\n    return this._uuid;\n  }\n\n  protected abstract getEventName(): string;\n\n  protected abstract getCallback(): FileSystemNetworkTaskProgressCallback<T> | undefined;\n\n  protected addSubscription() {\n    if (this.subscription) {\n      return;\n    }\n\n    this.subscription = this.emitter.addListener(this.getEventName(), (event: ProgressEvent<T>) => {\n      if (event.uuid === this.uuid) {\n        const callback = this.getCallback();\n        if (callback) {\n          callback(event.data);\n        }\n      }\n    });\n  }\n\n  protected removeSubscription() {\n    if (!this.subscription) {\n      return;\n    }\n    this.emitter.removeSubscription(this.subscription);\n    this.subscription = null;\n  }\n}\n\nexport class UploadTask extends FileSystemCancellableNetworkTask<UploadProgressData> {\n  private options: FileSystemUploadOptions;\n\n  constructor(\n    private url: string,\n    private fileUri: string,\n    options?: FileSystemUploadOptions,\n    private callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n  ) {\n    super();\n\n    const httpMethod = (options?.httpMethod?.toUpperCase() ||\n      'POST') as FileSystemAcceptedUploadHttpMethod;\n\n    this.options = {\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT,\n      ...options,\n      httpMethod,\n    };\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.uploadProgress';\n  }\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<UploadProgressData> | undefined {\n    return this.callback;\n  }\n\n  public async uploadAsync(): Promise<FileSystemUploadResult | undefined> {\n    if (!ExponentFileSystem.uploadTaskStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    const result = await ExponentFileSystem.uploadTaskStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options\n    );\n    this.removeSubscription();\n\n    return result;\n  }\n}\n\nexport class DownloadResumable extends FileSystemCancellableNetworkTask<DownloadProgressData> {\n  constructor(\n    private url: string,\n    private _fileUri: string,\n    private options: DownloadOptions = {},\n    private callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n    private resumeData?: string\n  ) {\n    super();\n  }\n\n  public get fileUri(): string {\n    return this._fileUri;\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.downloadProgress';\n  }\n\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<DownloadProgressData> | undefined {\n    return this.callback;\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this._fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return {\n        fileUri: this._fileUri,\n        options: this.options,\n        url: this.url,\n      };\n    }\n\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n    this.removeSubscription();\n    if (pauseResult) {\n      this.resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this.url,\n      fileUri: this.fileUri,\n      options: this.options,\n      resumeData: this.resumeData,\n    };\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
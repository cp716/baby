{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nvar DEFAULT_PADDING = 9;\nexport var getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {\n  var density = _ref.density;\n  var padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n\n    case 'medium':\n      return padding - 4;\n\n    case 'high':\n      return padding - 8;\n\n    default:\n      return padding;\n  }\n};\nexport var getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {\n  var _buttons$index, _buttons;\n\n  var theme = _ref2.theme,\n      index = _ref2.index,\n      buttons = _ref2.buttons;\n  var width = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;\n  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width\n    };\n  }\n\n  return {};\n};\nexport var getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {\n  var segment = _ref3.segment,\n      theme = _ref3.theme;\n\n  if (segment === 'first') {\n    return _objectSpread({\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    };\n  } else {\n    return _objectSpread({\n      borderRadius: 0\n    }, theme.isV3 && {\n      borderRightWidth: 0\n    });\n  }\n};\n\nvar getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {\n  var checked = _ref4.checked,\n      theme = _ref4.theme;\n\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n\n  return 'transparent';\n};\n\nvar getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {\n  var theme = _ref5.theme,\n      disabled = _ref5.disabled,\n      checked = _ref5.checked;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n};\n\nvar getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {\n  var theme = _ref6.theme;\n\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nvar getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {\n  var theme = _ref7.theme,\n      disabled = _ref7.disabled;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n\n    return theme.colors.primary;\n  }\n};\n\nexport var getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {\n  var theme = _ref8.theme,\n      disabled = _ref8.disabled,\n      checked = _ref8.checked;\n  var backgroundColor = getSegmentedButtonBackgroundColor({\n    theme: theme,\n    checked: checked\n  });\n  var borderColor = getSegmentedButtonBorderColor({\n    theme: theme,\n    disabled: disabled,\n    checked: checked\n  });\n  var textColor = getSegmentedButtonTextColor({\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getSegmentedButtonBorderWidth({\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","black","white","DEFAULT_PADDING","getSegmentedButtonDensityPadding","density","padding","getDisabledSegmentedButtonStyle","theme","index","buttons","width","getSegmentedButtonBorderWidth","isDisabled","disabled","isNextDisabled","borderRightWidth","getSegmentedButtonBorderRadius","segment","borderTopRightRadius","borderBottomRightRadius","isV3","borderTopLeftRadius","borderBottomLeftRadius","borderRadius","getSegmentedButtonBackgroundColor","checked","colors","secondaryContainer","primary","alpha","rgb","string","getSegmentedButtonBorderColor","surfaceDisabled","outline","dark","StyleSheet","hairlineWidth","getSegmentedButtonTextColor","onSurfaceDisabled","onSurface","getSegmentedButtonColors","backgroundColor","borderColor","textColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  disabled?: boolean;\n  checked: boolean;\n};\n\nconst DEFAULT_PADDING = 9;\n\nexport const getSegmentedButtonDensityPadding = ({\n  density,\n}: {\n  density?: 'regular' | 'small' | 'medium' | 'high';\n}) => {\n  let padding = DEFAULT_PADDING;\n\n  switch (density) {\n    case 'small':\n      return padding - 2;\n    case 'medium':\n      return padding - 4;\n    case 'high':\n      return padding - 8;\n    default:\n      return padding;\n  }\n};\n\nexport const getDisabledSegmentedButtonStyle = ({\n  theme,\n  index,\n  buttons,\n}: {\n  theme: InternalTheme;\n  buttons: { disabled?: boolean }[];\n  index: number;\n}): ViewStyle => {\n  const width = getSegmentedButtonBorderWidth({ theme });\n  const isDisabled = buttons[index]?.disabled;\n  const isNextDisabled = buttons[index + 1]?.disabled;\n\n  if (!isDisabled && isNextDisabled) {\n    return {\n      borderRightWidth: width,\n    };\n  }\n  return {};\n};\n\nexport const getSegmentedButtonBorderRadius = ({\n  segment,\n  theme,\n}: {\n  theme: InternalTheme;\n  segment?: 'first' | 'last';\n}): ViewStyle => {\n  if (segment === 'first') {\n    return {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  } else if (segment === 'last') {\n    return {\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n    };\n  } else {\n    return {\n      borderRadius: 0,\n      ...(theme.isV3 && { borderRightWidth: 0 }),\n    };\n  }\n};\n\nconst getSegmentedButtonBackgroundColor = ({ checked, theme }: BaseProps) => {\n  if (checked) {\n    if (theme.isV3) {\n      return theme.colors.secondaryContainer;\n    } else {\n      return color(theme.colors.primary).alpha(0.12).rgb().string();\n    }\n  }\n  return 'transparent';\n};\n\nconst getSegmentedButtonBorderColor = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n    return theme.colors.outline;\n  }\n  if (checked) {\n    return theme.colors.primary;\n  }\n\n  return color(theme.dark ? white : black)\n    .alpha(0.29)\n    .rgb()\n    .string();\n};\n\nconst getSegmentedButtonBorderWidth = ({\n  theme,\n}: Omit<BaseProps, 'disabled' | 'checked'>) => {\n  if (theme.isV3) {\n    return 1;\n  }\n\n  return StyleSheet.hairlineWidth;\n};\n\nconst getSegmentedButtonTextColor = ({\n  theme,\n  disabled,\n}: Omit<BaseProps, 'checked'>) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n    return theme.colors.onSurface;\n  } else {\n    if (disabled) {\n      return theme.colors.disabled;\n    }\n    return theme.colors.primary;\n  }\n};\n\nexport const getSegmentedButtonColors = ({\n  theme,\n  disabled,\n  checked,\n}: BaseProps) => {\n  const backgroundColor = getSegmentedButtonBackgroundColor({\n    theme,\n    checked,\n  });\n  const borderColor = getSegmentedButtonBorderColor({\n    theme,\n    disabled,\n    checked,\n  });\n  const textColor = getSegmentedButtonTextColor({ theme, disabled });\n  const borderWidth = getSegmentedButtonBorderWidth({ theme });\n\n  return { backgroundColor, borderColor, textColor, borderWidth };\n};\n"]},"metadata":{},"sourceType":"module"}
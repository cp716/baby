{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"focusedIcon\", \"unfocusedIcon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"badge\", \"testID\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport Badge from \"../Badge\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nvar badgeSize = 8;\nvar iconSize = 24;\nvar itemSize = 56;\nvar outlineHeight = 32;\n\nvar DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {\n  var focusedIcon = _ref.focusedIcon,\n      unfocusedIcon = _ref.unfocusedIcon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$badge = _ref.badge,\n      badge = _ref$badge === void 0 ? false : _ref$badge,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'drawer-collapsed-item' : _ref$testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = theme.isV3;\n  var scale = theme.animation.scale;\n\n  var _React$useState = React.useState(1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      numOfLines = _React$useState2[0],\n      setNumOfLines = _React$useState2[1];\n\n  var _React$useRef = React.useRef(new Animated.Value(active ? 1 : 0.5)),\n      animScale = _React$useRef.current;\n\n  React.useEffect(function () {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  var handlePressOut = function handlePressOut() {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';\n  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;\n  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;\n\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  var androidLetterSpacingStyle = Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  var labelTextStyle = _objectSpread({\n    color: labelColor\n  }, isV3 ? theme.fonts.labelMedium : {});\n\n  var icon = !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;\n  return React.createElement(View, rest, React.createElement(TouchableWithoutFeedback, {\n    onPress: onPress,\n    onPressOut: onPress ? handlePressOut : undefined,\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel,\n    testID: testID\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, React.createElement(Animated.View, {\n    style: [styles.outline, !label && styles.roundedOutline, {\n      transform: [label ? {\n        scaleX: animScale\n      } : {\n        scale: animScale\n      }],\n      backgroundColor: backgroundColor\n    }, style],\n    testID: testID + \"-outline\"\n  }), React.createElement(View, {\n    style: [styles.icon, {\n      top: iconPadding\n    }],\n    testID: testID + \"-container\"\n  }, badge && React.createElement(View, {\n    style: styles.badgeContainer\n  }, typeof badge === 'boolean' ? React.createElement(Badge, {\n    visible: badge,\n    size: badgeSize\n  }) : React.createElement(Badge, {\n    visible: badge != null,\n    size: 2 * badgeSize\n  }, badge)), React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: iconColor\n  })), label ? React.createElement(Text, {\n    variant: \"labelMedium\",\n    selectable: false,\n    numberOfLines: 2,\n    onTextLayout: onTextLayout,\n    style: [styles.label, androidLetterSpacingStyle, labelTextStyle]\n  }, label) : null)));\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\nvar styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center'\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  roundedOutline: {\n    height: itemSize\n  },\n  icon: {\n    position: 'absolute'\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch'\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center'\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2\n  }\n});\nexport default withInternalTheme(DrawerCollapsedItem);","map":{"version":3,"sources":["DrawerCollapsedItem.tsx"],"names":["React","withInternalTheme","Badge","Icon","Text","badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","focusedIcon","unfocusedIcon","label","active","theme","style","onPress","accessibilityLabel","badge","testID","rest","isV3","scale","animation","numOfLines","setNumOfLines","useState","current","animScale","useRef","Animated","Value","useEffect","setValue","handlePressOut","timing","toValue","duration","useNativeDriver","start","iconPadding","backgroundColor","colors","secondaryContainer","labelColor","onSurface","onSurfaceVariant","iconColor","onSecondaryContainer","onTextLayout","nativeEvent","lines","length","androidLetterSpacingStyle","Platform","OS","styles","letterSpacing","labelTextStyle","color","fonts","labelMedium","icon","undefined","selected","wrapper","outline","roundedOutline","transform","scaleX","top","badgeContainer","displayName","StyleSheet","create","width","marginBottom","minHeight","alignItems","height","borderRadius","justifyContent","position","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport Badge from '../Badge';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n  /**\n   * Icon to use as the focused destination icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   */\n  focusedIcon?: IconSource;\n  /**\n   * Icon to use as the unfocused destination icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   */\n  unfocusedIcon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      focusedIcon=\"inbox\"\n *      unfocusedIcon=\"inbox-outline\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  focusedIcon,\n  unfocusedIcon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  testID = 'drawer-collapsed-item',\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  const labelTextStyle = {\n    color: labelColor,\n    ...(isV3 ? theme.fonts.labelMedium : {}),\n  };\n\n  const icon =\n    !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;\n\n  return (\n    <View {...rest}>\n      {/* eslint-disable-next-line react-native-a11y/has-accessibility-props */}\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n            testID={`${testID}-outline`}\n          />\n\n          <View\n            style={[styles.icon, { top: iconPadding }]}\n            testID={`${testID}-container`}\n          >\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[styles.label, androidLetterSpacingStyle, labelTextStyle]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withInternalTheme(DrawerCollapsedItem);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport firebase from 'firebase';\nimport Button from \"../components/Button\";\nimport Loading from \"../components/Loading\";\nimport { translateErrors } from \"../utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function MailChangeScreen(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      newEmail = _useState2[0],\n      setNewEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmEmail = _useState4[0],\n      setConfirmEmail = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var currentUser = firebase.auth().currentUser;\n\n  function handlePress() {\n    if (newEmail === confirmEmail) {\n      if (newEmail === currentUser.email) {\n        Alert.alert('現在登録されているメールアドレスと新しく入力されたメールアドレスが同じです。');\n      } else {\n        setLoading(true);\n        currentUser.updateEmail(newEmail).then(function () {\n          Alert.alert('メールアドレスが変更されました', '新しいメールアドレスを使用してログインしてください。', [{\n            text: 'OK',\n            onPress: function onPress() {\n              navigation.reset({\n                index: 0,\n                routes: [{\n                  name: 'Setting'\n                }]\n              });\n            }\n          }]);\n        }).catch(function (error) {\n          var errorMsg = translateErrors(error.code);\n          Alert.alert(errorMsg.title, errorMsg.description);\n        }).finally(function () {\n          setLoading(false);\n        });\n      }\n    } else {\n      Alert.alert('エラー', '新しいメールアドレスと確認用メールアドレスが一致しません。');\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Loading, {\n      isLoading: isLoading\n    }), _jsxs(View, {\n      style: styles.inner,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\u5909\\u66F4\"\n      }), _jsx(Text, {\n        style: styles.inputText,\n        children: \"\\u65B0\\u3057\\u3044\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: newEmail,\n        onChangeText: function onChangeText(text) {\n          setNewEmail(text);\n        },\n        autoCapitalize: \"none\",\n        keyboardType: \"email-address\",\n        placeholder: \"\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n        placeholderTextColor: \"#BFBFBF\",\n        textContentType: \"emailAddress\"\n      }), _jsx(Text, {\n        style: styles.inputText,\n        children: \"\\u65B0\\u3057\\u3044\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\\uFF08\\u78BA\\u8A8D\\uFF09\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: confirmEmail,\n        onChangeText: function onChangeText(text) {\n          setConfirmEmail(text);\n        },\n        autoCapitalize: \"none\",\n        keyboardType: \"email-address\",\n        placeholder: \"\\u518D\\u5EA6\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n        placeholderTextColor: \"#BFBFBF\",\n        textContentType: \"emailAddress\"\n      }), _jsx(Button, {\n        label: \"\\u78BA\\u8A8D\",\n        onPress: handlePress\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F0F4F8'\n  },\n  inner: {\n    paddingHorizontal: 27,\n    paddingVertical: 24\n  },\n  inputText: {\n    fontSize: 15,\n    lineHeight: 32,\n    marginBottom: 1,\n    color: '#737373'\n  },\n  title: {\n    fontSize: 24,\n    lineHeight: 32,\n    fontWeight: 'bold',\n    marginBottom: 24\n  },\n  input: {\n    fontSize: 16,\n    height: 48,\n    borderColor: '#DDDDDD',\n    borderWidth: 1,\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 8,\n    marginBottom: 20\n  }\n});","map":{"version":3,"names":["React","useState","firebase","Button","Loading","translateErrors","MailChangeScreen","props","navigation","newEmail","setNewEmail","confirmEmail","setConfirmEmail","isLoading","setLoading","currentUser","auth","handlePress","email","Alert","alert","updateEmail","then","text","onPress","reset","index","routes","name","catch","error","errorMsg","code","title","description","finally","styles","container","inner","inputText","input","StyleSheet","create","flex","backgroundColor","paddingHorizontal","paddingVertical","fontSize","lineHeight","marginBottom","color","fontWeight","height","borderColor","borderWidth"],"sources":["/Users/atsushi/Dev/baby/src/screens/MailChangeScreen.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, TouchableOpacity, Alert, } from 'react-native';\nimport firebase from 'firebase';\n\nimport Button from '../components/Button';\nimport Loading from '../components/Loading';\nimport { translateErrors } from '../utils';\n\nexport default function MailChangeScreen(props) {\n    const { navigation } = props;\n    const [newEmail, setNewEmail] = useState('');\n    const [confirmEmail, setConfirmEmail] = useState('');\n    const [isLoading, setLoading] = useState(false);\n    const currentUser = firebase.auth().currentUser;\n\n    function handlePress() {\n        if (newEmail === confirmEmail) {\n            if (newEmail === currentUser.email) {\n                Alert.alert('現在登録されているメールアドレスと新しく入力されたメールアドレスが同じです。');\n            } else {\n                setLoading(true);\n\n                // 新しいメールアドレスに変更する処理を実行\n                currentUser.updateEmail(newEmail)\n                    .then(() => {\n                        Alert.alert('メールアドレスが変更されました', '新しいメールアドレスを使用してログインしてください。', [\n                            {\n                                text: 'OK',\n                                onPress: () => {\n                                    navigation.reset({\n                                        index: 0,\n                                        routes: [{ name: 'Setting' }],\n                                    });\n                                },\n                            },\n                        ]);\n                    })\n                    .catch((error) => {\n                        const errorMsg = translateErrors(error.code);\n                        Alert.alert(errorMsg.title, errorMsg.description);\n                    })\n                    .finally(() => {\n                        setLoading(false);\n                    });\n            }\n        } else {\n            Alert.alert('エラー', '新しいメールアドレスと確認用メールアドレスが一致しません。');\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <Loading isLoading={isLoading} />\n            <View style={styles.inner}>\n                <Text style={styles.title}>メールアドレス変更</Text>\n                <Text style={styles.inputText}>新しいメールアドレス</Text>\n                <TextInput\n                    style={styles.input}\n                    value={newEmail}\n                    onChangeText={(text) => { setNewEmail(text); }}\n                    autoCapitalize=\"none\"\n                    keyboardType=\"email-address\"\n                    placeholder=\"入力してください\"\n                    placeholderTextColor=\"#BFBFBF\"\n                    textContentType=\"emailAddress\"\n                />\n                <Text style={styles.inputText}>新しいメールアドレス（確認）</Text>\n                <TextInput\n                    style={styles.input}\n                    value={confirmEmail}\n                    onChangeText={(text) => { setConfirmEmail(text); }}\n                    autoCapitalize=\"none\"\n                    keyboardType=\"email-address\"\n                    placeholder=\"再度入力してください\"\n                    placeholderTextColor=\"#BFBFBF\"\n                    textContentType=\"emailAddress\"\n                />\n                <Button\n                    label=\"確認\"\n                    onPress={handlePress}\n                />\n            </View>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#F0F4F8',\n    },\n    inner: {\n        paddingHorizontal: 27,\n        paddingVertical: 24,\n    },\n    inputText: {\n        fontSize: 15,\n        lineHeight: 32,\n        marginBottom: 1,\n        color: '#737373',\n    },\n    title: {\n        fontSize: 24,\n        lineHeight: 32,\n        fontWeight: 'bold',\n        marginBottom: 24,\n    },\n    input: {\n        fontSize: 16,\n        height: 48,\n        borderColor: '#DDDDDD',\n        borderWidth: 1,\n        backgroundColor: '#ffffff',\n        paddingHorizontal: 8,\n        marginBottom: 20,\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"value\", \"status\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { getAndroidSelectionControlColor } from \"../Checkbox/utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function RadioButtonAndroid(_ref) {\n  var disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      value = _ref.value,\n      status = _ref.status,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(BORDER_WIDTH)),\n      borderAnim = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(1)),\n      radioAnim = _React$useRef2.current;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n\n    var _getAndroidSelectionC = getAndroidSelectionControlColor({\n      theme: theme,\n      disabled: disabled,\n      checked: checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor\n    }),\n        rippleColor = _getAndroidSelectionC.rippleColor,\n        selectionControlColor = _getAndroidSelectionC.selectionControlColor;\n\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function (event) {\n        handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: selectionControlColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: selectionControlColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withInternalTheme(RadioButtonAndroid);\nvar RadioButtonAndroidWithTheme = withInternalTheme(RadioButtonAndroid);\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","withInternalTheme","getAndroidSelectionControlColor","TouchableRipple","RadioButtonContext","handlePress","isChecked","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","useRef","Animated","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","context","checked","contextValue","rippleColor","selectionControlColor","customColor","color","customUncheckedColor","uncheckedColor","undefined","event","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getAndroidSelectionControlColor } from '../Checkbox/utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { rippleColor, selectionControlColor } =\n          getAndroidSelectionControlColor({\n            theme,\n            disabled,\n            checked,\n            customColor: rest.color,\n            customUncheckedColor: rest.uncheckedColor,\n          });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: selectionControlColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: selectionControlColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withInternalTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withInternalTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}
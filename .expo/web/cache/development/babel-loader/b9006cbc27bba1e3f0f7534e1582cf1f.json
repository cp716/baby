{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport firebase from 'firebase';\nimport Button from \"../components/Button\";\nimport { translateErrors } from \"../utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PasswordResetRequestScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  function handlePress() {\n    return _handlePress.apply(this, arguments);\n  }\n\n  function _handlePress() {\n    _handlePress = _asyncToGenerator(function* () {\n      try {\n        yield firebase.auth().sendPasswordResetEmail(email);\n        Alert.alert('メール送信完了', '入力されたメールアドレスにパスワードリセットメールを送信しました。', [{\n          text: 'OK',\n          onPress: function onPress() {}\n        }]);\n      } catch (error) {\n        console.error(error);\n        var errorMsg = translateErrors(error.code);\n        Alert.alert(errorMsg.title, errorMsg.description);\n      }\n    });\n    return _handlePress.apply(this, arguments);\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.inner,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u30EA\\u30BB\\u30C3\\u30C8\"\n      }), _jsx(Text, {\n        style: styles.inputText,\n        children: \"\\u767B\\u9332\\u3057\\u305F\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: email,\n        onChangeText: function onChangeText(text) {\n          return setEmail(text);\n        },\n        autoCapitalize: \"none\",\n        keyboardType: \"email-address\",\n        placeholder: \"\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n        placeholderTextColor: \"#BFBFBF\",\n        textContentType: \"emailAddress\"\n      }), _jsx(Button, {\n        label: \"\\u30EA\\u30BB\\u30C3\\u30C8\\u30E1\\u30FC\\u30EB\\u3092\\u9001\\u4FE1\",\n        onPress: handlePress\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F0F4F8'\n  },\n  inner: {\n    paddingHorizontal: 27,\n    paddingVertical: 24\n  },\n  inputText: {\n    fontSize: 15,\n    lineHeight: 32,\n    marginBottom: 1,\n    color: '#737373'\n  },\n  title: {\n    fontSize: 24,\n    lineHeight: 32,\n    fontWeight: 'bold',\n    marginBottom: 24\n  },\n  input: {\n    fontSize: 16,\n    height: 48,\n    borderColor: '#DDDDDD',\n    borderWidth: 1,\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 8,\n    marginBottom: 20\n  }\n});","map":{"version":3,"names":["React","useState","firebase","Button","translateErrors","PasswordResetRequestScreen","email","setEmail","handlePress","auth","sendPasswordResetEmail","Alert","alert","text","onPress","error","console","errorMsg","code","title","description","styles","container","inner","inputText","input","StyleSheet","create","flex","backgroundColor","paddingHorizontal","paddingVertical","fontSize","lineHeight","marginBottom","color","fontWeight","height","borderColor","borderWidth"],"sources":["/Users/atsushi/Dev/baby/src/screens/PasswordChangeRequestScreen.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, StyleSheet, Alert } from 'react-native';\nimport firebase from 'firebase';\nimport Button from '../components/Button';\nimport { translateErrors } from '../utils';\n\nexport default function PasswordResetRequestScreen() {\n  const [email, setEmail] = useState('');\n\n  async function handlePress() {\n    try {\n      await firebase.auth().sendPasswordResetEmail(email);\n      Alert.alert('メール送信完了', '入力されたメールアドレスにパスワードリセットメールを送信しました。', [\n        {\n          text: 'OK',\n          onPress: () => {\n            // メール送信後の処理を追加することができます。\n          },\n        },\n      ]);\n    } catch (error) {\n      console.error(error);\n      const errorMsg = translateErrors(error.code);\n      Alert.alert(errorMsg.title, errorMsg.description);\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.inner}>\n        <Text style={styles.title}>パスワードリセット</Text>\n        <Text style={styles.inputText}>登録したメールアドレス</Text>\n        <TextInput\n          style={styles.input}\n          value={email}\n          onChangeText={(text) => setEmail(text)}\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n          placeholder=\"入力してください\"\n          placeholderTextColor=\"#BFBFBF\"\n          textContentType=\"emailAddress\"\n        />\n        <Button label=\"リセットメールを送信\" onPress={handlePress} />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F0F4F8',\n  },\n  inner: {\n    paddingHorizontal: 27,\n    paddingVertical: 24,\n  },\n  inputText: {\n    fontSize: 15,\n    lineHeight: 32,\n    marginBottom: 1,\n    color: '#737373',\n  },\n  title: {\n    fontSize: 24,\n    lineHeight: 32,\n    fontWeight: 'bold',\n    marginBottom: 24,\n  },\n  input: {\n    fontSize: 16,\n    height: 48,\n    borderColor: '#DDDDDD',\n    borderWidth: 1,\n    backgroundColor: '#ffffff',\n    paddingHorizontal: 8,\n    marginBottom: 20,\n  },\n});\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAEA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP;AACA,SAASC,eAAT;;;AAEA,eAAe,SAASC,0BAAT,GAAsC;EACnD,gBAA0BJ,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOK,KAAP;EAAA,IAAcC,QAAd;;EADmD,SAGpCC,WAHoC;IAAA;EAAA;;EAAA;IAAA,iCAGnD,aAA6B;MAC3B,IAAI;QACF,MAAMN,QAAQ,CAACO,IAAT,GAAgBC,sBAAhB,CAAuCJ,KAAvC,CAAN;QACAK,KAAK,CAACC,KAAN,CAAY,SAAZ,EAAuB,mCAAvB,EAA4D,CAC1D;UACEC,IAAI,EAAE,IADR;UAEEC,OAAO,EAAE,mBAAM,CAEd;QAJH,CAD0D,CAA5D;MAQD,CAVD,CAUE,OAAOC,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;QACA,IAAME,QAAQ,GAAGb,eAAe,CAACW,KAAK,CAACG,IAAP,CAAhC;QACAP,KAAK,CAACC,KAAN,CAAYK,QAAQ,CAACE,KAArB,EAA4BF,QAAQ,CAACG,WAArC;MACD;IACF,CAnBkD;IAAA;EAAA;;EAqBnD,OACE,KAAC,IAAD;IAAM,KAAK,EAAEC,MAAM,CAACC,SAApB;IAAA,UACE,MAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,KAApB;MAAA,WACE,KAAC,IAAD;QAAM,KAAK,EAAEF,MAAM,CAACF,KAApB;QAAA,UAA2B;MAA3B,EADF,EAEE,KAAC,IAAD;QAAM,KAAK,EAAEE,MAAM,CAACG,SAApB;QAAA,UAA+B;MAA/B,EAFF,EAGE,KAAC,SAAD;QACE,KAAK,EAAEH,MAAM,CAACI,KADhB;QAEE,KAAK,EAAEnB,KAFT;QAGE,YAAY,EAAE,sBAACO,IAAD;UAAA,OAAUN,QAAQ,CAACM,IAAD,CAAlB;QAAA,CAHhB;QAIE,cAAc,EAAC,MAJjB;QAKE,YAAY,EAAC,eALf;QAME,WAAW,EAAC,kDANd;QAOE,oBAAoB,EAAC,SAPvB;QAQE,eAAe,EAAC;MARlB,EAHF,EAaE,KAAC,MAAD;QAAQ,KAAK,EAAC,8DAAd;QAA2B,OAAO,EAAEL;MAApC,EAbF;IAAA;EADF,EADF;AAmBD;AAED,IAAMa,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;EAC/BL,SAAS,EAAE;IACTM,IAAI,EAAE,CADG;IAETC,eAAe,EAAE;EAFR,CADoB;EAK/BN,KAAK,EAAE;IACLO,iBAAiB,EAAE,EADd;IAELC,eAAe,EAAE;EAFZ,CALwB;EAS/BP,SAAS,EAAE;IACTQ,QAAQ,EAAE,EADD;IAETC,UAAU,EAAE,EAFH;IAGTC,YAAY,EAAE,CAHL;IAITC,KAAK,EAAE;EAJE,CAToB;EAe/BhB,KAAK,EAAE;IACLa,QAAQ,EAAE,EADL;IAELC,UAAU,EAAE,EAFP;IAGLG,UAAU,EAAE,MAHP;IAILF,YAAY,EAAE;EAJT,CAfwB;EAqB/BT,KAAK,EAAE;IACLO,QAAQ,EAAE,EADL;IAELK,MAAM,EAAE,EAFH;IAGLC,WAAW,EAAE,SAHR;IAILC,WAAW,EAAE,CAJR;IAKLV,eAAe,EAAE,SALZ;IAMLC,iBAAiB,EAAE,CANd;IAOLI,YAAY,EAAE;EAPT;AArBwB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}
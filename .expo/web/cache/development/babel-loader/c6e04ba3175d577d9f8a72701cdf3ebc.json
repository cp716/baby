{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\n\nvar isDark = function isDark(_ref) {\n  var dark = _ref.dark,\n      backgroundColor = _ref.backgroundColor;\n\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nvar getButtonBackgroundColor = function getButtonBackgroundColor(_ref2) {\n  var isMode = _ref2.isMode,\n      theme = _ref2.theme,\n      disabled = _ref2.disabled,\n      customButtonColor = _ref2.customButtonColor;\n\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nvar getButtonTextColor = function getButtonTextColor(_ref3) {\n  var isMode = _ref3.isMode,\n      theme = _ref3.theme,\n      disabled = _ref3.disabled,\n      customTextColor = _ref3.customTextColor,\n      backgroundColor = _ref3.backgroundColor,\n      dark = _ref3.dark;\n\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {\n        return isDark({\n          dark: dark,\n          backgroundColor: backgroundColor\n        }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({\n      dark: dark,\n      backgroundColor: backgroundColor\n    }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nvar getButtonBorderColor = function getButtonBorderColor(_ref4) {\n  var isMode = _ref4.isMode,\n      disabled = _ref4.disabled,\n      theme = _ref4.theme;\n\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n  }\n\n  return 'transparent';\n};\n\nvar getButtonBorderWidth = function getButtonBorderWidth(_ref5) {\n  var isMode = _ref5.isMode,\n      theme = _ref5.theme;\n\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport var getButtonColors = function getButtonColors(_ref6) {\n  var theme = _ref6.theme,\n      mode = _ref6.mode,\n      customButtonColor = _ref6.customButtonColor,\n      customTextColor = _ref6.customTextColor,\n      disabled = _ref6.disabled,\n      dark = _ref6.dark;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var backgroundColor = getButtonBackgroundColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customButtonColor: customButtonColor\n  });\n  var textColor = getButtonTextColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customTextColor: customTextColor,\n    backgroundColor: backgroundColor,\n    dark: dark\n  });\n  var borderColor = getButtonBorderColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getButtonBorderWidth({\n    isMode: isMode,\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"sources":["utils.tsx"],"names":["color","black","white","isDark","dark","backgroundColor","isLight","getButtonBackgroundColor","isMode","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","alpha","rgb","string","getButtonTextColor","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","outline","getButtonBorderWidth","StyleSheet","hairlineWidth","getButtonColors","mode","modeToCompare","textColor","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: InternalTheme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: InternalTheme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
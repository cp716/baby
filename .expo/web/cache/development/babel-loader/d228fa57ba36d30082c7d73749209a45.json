{"ast":null,"code":"import color from 'color';\n\nvar getUnderlayColor = function getUnderlayColor(_ref) {\n  var theme = _ref.theme,\n      calculatedRippleColor = _ref.calculatedRippleColor,\n      underlayColor = _ref.underlayColor;\n\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nvar getRippleColor = function getRippleColor(_ref2) {\n  var theme = _ref2.theme,\n      rippleColor = _ref2.rippleColor;\n\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport var getTouchableRippleColors = function getTouchableRippleColors(_ref3) {\n  var theme = _ref3.theme,\n      rippleColor = _ref3.rippleColor,\n      underlayColor = _ref3.underlayColor;\n  var calculatedRippleColor = getRippleColor({\n    theme: theme,\n    rippleColor: rippleColor\n  });\n  return {\n    calculatedRippleColor: calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme: theme,\n      calculatedRippleColor: calculatedRippleColor,\n      underlayColor: underlayColor\n    })\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","getUnderlayColor","theme","calculatedRippleColor","underlayColor","isV3","rgb","string","fade","getRippleColor","rippleColor","colors","onSurface","alpha","dark","text","getTouchableRippleColors","calculatedUnderlayColor"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,IAAA,EAQnB;EARoB,IACxBC,KADwB,GAQzB,IARyB,CACxBA,KADwB;EAAA,IAExBC,qBAFwB,GAQzB,IARyB,CAExBA,qBAFwB;EAAA,IAGxBC,aAHwB,GAQzB,IARyB,CAGxBA,aAHwB;;EASxB,IAAIA,aAAa,IAAI,IAArB,EAA2B;IACzB,OAAOA,aAAP;EACF;;EAEA,IAAIF,KAAK,CAACG,IAAV,EAAgB;IACd,OAAOL,KAAK,CAACG,qBAAD,CAALH,CAA6BM,GAA7BN,GAAmCO,MAAnCP,EAAP;EACF;;EAEA,OAAOA,KAAK,CAACG,qBAAD,CAALH,CAA6BQ,IAA7BR,CAAkC,GAAlCA,EAAuCM,GAAvCN,GAA6CO,MAA7CP,EAAP;AACD,CAlBD;;AAoBA,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAMjB;EANkB,IACtBP,KADsB,GAMvB,KANuB,CACtBA,KADsB;EAAA,IAEtBQ,WAFsB,GAMvB,KANuB,CAEtBA,WAFsB;;EAOtB,IAAIA,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACF;;EAEA,IAAIR,KAAK,CAACG,IAAV,EAAgB;IACd,OAAOL,KAAK,CAACE,KAAK,CAACS,MAANT,CAAaU,SAAd,CAALZ,CAA8Ba,KAA9Bb,CAAoC,IAApCA,EAA0CM,GAA1CN,GAAgDO,MAAhDP,EAAP;EACF;;EAEA,IAAIE,KAAK,CAACY,IAAV,EAAgB;IACd,OAAOd,KAAK,CAACE,KAAK,CAACS,MAANT,CAAaa,IAAd,CAALf,CAAyBa,KAAzBb,CAA+B,IAA/BA,EAAqCM,GAArCN,GAA2CO,MAA3CP,EAAP;EACF;;EACA,OAAOA,KAAK,CAACE,KAAK,CAACS,MAANT,CAAaa,IAAd,CAALf,CAAyBa,KAAzBb,CAA+B,GAA/BA,EAAoCM,GAApCN,GAA0CO,MAA1CP,EAAP;AACD,CAnBD;;AAqBA,OAAO,IAAMgB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAQlC;EARmC,IACvCd,KADuC,GAQxC,KARwC,CACvCA,KADuC;EAAA,IAEvCQ,WAFuC,GAQxC,KARwC,CAEvCA,WAFuC;EAAA,IAGvCN,aAHuC,GAQxC,KARwC,CAGvCA,aAHuC;EASvC,IAAMD,qBAAqB,GAAGM,cAAc,CAAC;IAAEP,KAAK,EAALA,KAAF;IAASQ,WAAAA,EAAAA;EAAT,CAAD,CAA5C;EACA,OAAO;IACLP,qBAAqB,EAArBA,qBADK;IAELc,uBAAuB,EAAEhB,gBAAgB,CAAC;MACxCC,KAAK,EAALA,KADwC;MAExCC,qBAAqB,EAArBA,qBAFwC;MAGxCC,aAAAA,EAAAA;IAHwC,CAAD;EAFpC,CAAP;AAQD,CAlBM","sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\nconst getUnderlayColor = ({\n  theme,\n  calculatedRippleColor,\n  underlayColor,\n}: {\n  theme: InternalTheme;\n  calculatedRippleColor: string;\n  underlayColor?: string;\n}) => {\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  rippleColor,\n}: {\n  theme: InternalTheme;\n  rippleColor?: string;\n}) => {\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport const getTouchableRippleColors = ({\n  theme,\n  rippleColor,\n  underlayColor,\n}: {\n  theme: InternalTheme;\n  rippleColor?: string;\n  underlayColor?: string;\n}) => {\n  const calculatedRippleColor = getRippleColor({ theme, rippleColor });\n  return {\n    calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme,\n      calculatedRippleColor,\n      underlayColor,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
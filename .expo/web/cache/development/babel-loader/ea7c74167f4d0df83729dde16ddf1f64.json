{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"status\", \"disabled\", \"onPress\", \"theme\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getSelectionControlIOSColor } from \"./utils\";\n\nvar CheckboxIOS = function CheckboxIOS(_ref) {\n  var status = _ref.status,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checked = status === 'checked';\n  var indeterminate = status === 'indeterminate';\n\n  var _getSelectionControlI = getSelectionControlIOSColor({\n    theme: theme,\n    disabled: disabled,\n    customColor: rest.color\n  }),\n      checkedColor = _getSelectionControlI.checkedColor,\n      rippleColor = _getSelectionControlI.rippleColor;\n\n  var icon = indeterminate ? 'minus' : 'check';\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), React.createElement(View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withInternalTheme(CheckboxIOS);\nvar CheckboxIOSWithTheme = withInternalTheme(CheckboxIOS);\nexport { CheckboxIOSWithTheme as CheckboxIOS };","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["React","withInternalTheme","MaterialCommunityIcon","TouchableRipple","getSelectionControlIOSColor","CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","rippleColor","customColor","color","icon","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","CheckboxIOSWithTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAGA,SAASC,iBAAT;AAEA,OAAOC,qBAAP;AACA,OAAOC,eAAP;AACA,SAASC,2BAAT;;AA6CA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAOP;EAPQ,IACnBC,MADmB,GAOb,IAPa,CACnBA,MADmB;EAAA,IAEnBC,QAFmB,GAOb,IAPa,CAEnBA,QAFmB;EAAA,IAGnBC,OAHmB,GAOb,IAPa,CAGnBA,OAHmB;EAAA,IAInBC,KAJmB,GAOb,IAPa,CAInBA,KAJmB;EAAA,IAKnBC,MALmB,GAOb,IAPa,CAKnBA,MALmB;EAAA,IAMhBC,IANgB,4BAOb,IAPa;;EAQnB,IAAMC,OAAO,GAAGN,MAAM,KAAK,SAA3B;EACA,IAAMO,aAAa,GAAGP,MAAM,KAAK,eAAjC;;EAEA,4BAAsCF,2BAA2B,CAAC;IAChEK,KAAK,EAALA,KADgE;IAEhEF,QAAQ,EAARA,QAFgE;IAGhES,WAAW,EAAEL,IAAI,CAACM;EAH8C,CAAD,CAAjE;EAAA,IAAQH,YAAR,yBAAQA,YAAR;EAAA,IAAsBC,WAAtB,yBAAsBA,WAAtB;;EAMA,IAAMG,IAAI,GAAGL,aAAa,GAAG,OAAH,GAAa,OAAvC;EAEA,OACE,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,QAAA,CAAA,EAAA,EACVF,IADU,EACN;IACR,UAAU,EAAA,IADF;IAER,WAAW,EAAEI,WAFL;IAGR,OAAO,EAAEP,OAHD;IAIR,QAAQ,EAAED,QAJF;IAKR,iBAAiB,EAAC,UALV;IAMR,kBAAkB,EAAE;MAAEA,QAAQ,EAARA,QAAF;MAAYK,OAAAA,EAAAA;IAAZ,CANZ;IAOR,uBAAuB,EAAC,QAPhB;IAQR,KAAK,EAAEO,MAAM,CAACC,SARN;IASR,MAAM,EAAEV;EATA,CADM,CAAhB,EAYE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;IAAC,KAAK,EAAE;MAAEW,OAAO,EAAER,aAAa,IAAID,OAAjBC,GAA2B,CAA3BA,GAA+B;IAA1C;EAAR,CAAL,EACE,KAAA,CAAA,aAAA,CAAC,qBAAD,EAAsB;IACpB,gBAAgB,EAAE,KADE;IAEpB,IAAI,EAAEK,IAFc;IAGpB,IAAI,EAAE,EAHc;IAIpB,KAAK,EAAEJ,YAJa;IAKpB,SAAS,EAAC;EALU,CAAtB,CADF,CAZF,CADF;AAwBD,CA3CD;;AA6CAT,WAAW,CAACiB,WAAZjB,GAA0B,cAA1BA;AAEA,IAAMc,MAAM,GAAGI,UAAU,CAACC,MAAXD,CAAkB;EAC/BH,SAAS,EAAE;IACTK,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlBH,CAAf;AAOA,eAAetB,iBAAiB,CAACI,WAAD,CAAhC;AAGA,IAAMsB,oBAAoB,GAAG1B,iBAAiB,CAACI,WAAD,CAA9C;AAEA,SAASsB,oBAAoB,IAAItB,WAAjC","sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getSelectionControlIOSColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color,\n  });\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withInternalTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport color from 'color';\n\nvar getBorderColor = function getBorderColor(_ref) {\n  var theme = _ref.theme,\n      disabled = _ref.disabled;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref2) {\n  var theme = _ref2.theme,\n      isMode = _ref2.isMode,\n      disabled = _ref2.disabled,\n      selected = _ref2.selected,\n      customContainerColor = _ref2.customContainerColor;\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nvar getIconColor = function getIconColor(_ref3) {\n  var theme = _ref3.theme,\n      isMode = _ref3.isMode,\n      disabled = _ref3.disabled,\n      selected = _ref3.selected,\n      customIconColor = _ref3.customIconColor;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nvar getRippleColor = function getRippleColor(_ref4) {\n  var theme = _ref4.theme,\n      iconColor = _ref4.iconColor;\n\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport var getIconButtonColor = function getIconButtonColor(_ref5) {\n  var theme = _ref5.theme,\n      disabled = _ref5.disabled,\n      mode = _ref5.mode,\n      selected = _ref5.selected,\n      customIconColor = _ref5.customIconColor,\n      customContainerColor = _ref5.customContainerColor;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var baseIconColorProps = {\n    theme: theme,\n    isMode: isMode,\n    disabled: disabled,\n    selected: selected\n  };\n  var iconColor = getIconColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n    customIconColor: customIconColor\n  }));\n  return {\n    iconColor: iconColor,\n    backgroundColor: getBackgroundColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n      customContainerColor: customContainerColor\n    })),\n    rippleColor: getRippleColor({\n      theme: theme,\n      iconColor: iconColor\n    }),\n    borderColor: getBorderColor({\n      theme: theme,\n      disabled: disabled\n    })\n  };\n};","map":{"version":3,"sources":["utils.ts"],"names":["color","getBorderColor","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","iconColor","alpha","rgb","string","getIconButtonColor","mode","modeToCompare","baseIconColorProps","backgroundColor","rippleColor","borderColor"],"mappings":"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","sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: InternalTheme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport overlay from \"../../styles/overlay\";\nimport { black, white } from \"../../styles/themes/v2/colors\";\nimport Tooltip from \"../Tooltip/Tooltip\";\nimport AppbarAction from \"./AppbarAction\";\nimport AppbarBackAction from \"./AppbarBackAction\";\nimport AppbarContent from \"./AppbarContent\";\nexport var getAppbarColor = function getAppbarColor(theme, elevation, customBackground, elevated) {\n  var isV3 = theme.isV3,\n      isDarkTheme = theme.dark,\n      mode = theme.mode,\n      colors = theme.colors;\n  var isAdaptiveMode = mode === 'adaptive';\n\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors === null || colors === void 0 ? void 0 : colors.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return theme.colors.elevation.level2;\n  }\n\n  return colors.surface;\n};\nexport var DEFAULT_APPBAR_HEIGHT = 56;\nvar MD3_DEFAULT_APPBAR_HEIGHT = 64;\nexport var modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT\n};\nexport var modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge'\n};\nexport var renderAppbarContent = function renderAppbarContent(_ref) {\n  var children = _ref.children,\n      isDark = _ref.isDark,\n      _ref$shouldCenterCont = _ref.shouldCenterContent,\n      shouldCenterContent = _ref$shouldCenterCont === void 0 ? false : _ref$shouldCenterCont,\n      isV3 = _ref.isV3,\n      renderOnly = _ref.renderOnly,\n      renderExcept = _ref.renderExcept,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'small' : _ref$mode;\n  return React.Children.toArray(children).filter(function (child) {\n    return child != null && typeof child !== 'boolean';\n  }).filter(function (child) {\n    return renderExcept ? !renderExcept.includes(child.type) : child;\n  }).filter(function (child) {\n    return renderOnly ? renderOnly.includes(child.type) : child;\n  }).map(function (child, i) {\n    if (!React.isValidElement(child) || ![AppbarContent, AppbarAction, AppbarBackAction, Tooltip].includes(child.type)) {\n      return child;\n    }\n\n    var props = {\n      color: typeof child.props.color !== 'undefined' ? child.props.color : isV3 ? undefined : isDark ? white : black\n    };\n\n    if (child.type === AppbarContent) {\n      props.mode = mode;\n      props.style = [isV3 ? i === 0 && !shouldCenterContent && styles.v3Spacing : i !== 0 && styles.v2Spacing, shouldCenterContent && styles.centerAlignedContent, child.props.style];\n    }\n\n    return React.cloneElement(child, props);\n  });\n};\nvar styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center'\n  },\n  v2Spacing: {\n    marginLeft: 8\n  },\n  v3Spacing: {\n    marginLeft: 12\n  }\n});","map":{"version":3,"sources":["utils.ts"],"names":["React","overlay","black","white","Tooltip","AppbarAction","AppbarBackAction","AppbarContent","getAppbarColor","theme","elevation","customBackground","elevated","isV3","dark","isDarkTheme","mode","colors","isAdaptiveMode","surface","primary","level2","DEFAULT_APPBAR_HEIGHT","MD3_DEFAULT_APPBAR_HEIGHT","modeAppbarHeight","small","medium","large","modeTextVariant","renderAppbarContent","children","isDark","shouldCenterContent","renderOnly","renderExcept","Children","toArray","filter","child","includes","type","map","i","isValidElement","props","color","undefined","style","styles","v3Spacing","v2Spacing","centerAlignedContent","cloneElement","StyleSheet","create","alignItems","marginLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type { ColorValue, StyleProp, ViewStyle } from 'react-native';\nimport { StyleSheet } from 'react-native';\n\nimport overlay from '../../styles/overlay';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport Tooltip from '../Tooltip/Tooltip';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport AppbarContent from './AppbarContent';\n\nexport type AppbarModes = 'small' | 'medium' | 'large' | 'center-aligned';\n\nexport const getAppbarColor = (\n  theme: InternalTheme,\n  elevation: number,\n  customBackground?: ColorValue,\n  elevated?: boolean\n) => {\n  const { isV3, dark: isDarkTheme, mode, colors } = theme;\n  const isAdaptiveMode = mode === 'adaptive';\n  if (customBackground) {\n    return customBackground;\n  }\n\n  if (!isV3) {\n    if (isDarkTheme && isAdaptiveMode) {\n      return overlay(elevation, colors?.surface);\n    }\n\n    return colors.primary;\n  }\n\n  if (elevated) {\n    return theme.colors.elevation.level2;\n  }\n\n  return colors.surface;\n};\n\ntype RenderAppbarContentProps = {\n  children: React.ReactNode;\n  isDark: boolean;\n  shouldCenterContent?: boolean;\n  isV3: boolean;\n  renderOnly?: React.ComponentType<any>[];\n  renderExcept?: React.ComponentType<any>[];\n  mode?: AppbarModes;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\nconst MD3_DEFAULT_APPBAR_HEIGHT = 64;\n\nexport const modeAppbarHeight = {\n  small: MD3_DEFAULT_APPBAR_HEIGHT,\n  medium: 112,\n  large: 152,\n  'center-aligned': MD3_DEFAULT_APPBAR_HEIGHT,\n};\n\nexport const modeTextVariant = {\n  small: 'titleLarge',\n  medium: 'headlineSmall',\n  large: 'headlineMedium',\n  'center-aligned': 'titleLarge',\n};\n\nexport const renderAppbarContent = ({\n  children,\n  isDark,\n  shouldCenterContent = false,\n  isV3,\n  renderOnly,\n  renderExcept,\n  mode = 'small',\n}: RenderAppbarContentProps) => {\n  return (\n    React.Children.toArray(children as React.ReactNode | React.ReactNode[])\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .filter((child) =>\n        // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n        renderExcept ? !renderExcept.includes(child.type) : child\n      )\n      // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n      .filter((child) => (renderOnly ? renderOnly.includes(child.type) : child))\n      .map((child, i) => {\n        if (\n          !React.isValidElement(child) ||\n          ![AppbarContent, AppbarAction, AppbarBackAction, Tooltip].includes(\n            // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n            child.type\n          )\n        ) {\n          return child;\n        }\n\n        const props: {\n          color?: string;\n          style?: StyleProp<ViewStyle>;\n          mode?: AppbarModes;\n        } = {\n          color:\n            typeof child.props.color !== 'undefined'\n              ? child.props.color\n              : isV3\n              ? undefined\n              : isDark\n              ? white\n              : black,\n        };\n\n        if (child.type === AppbarContent) {\n          props.mode = mode;\n          props.style = [\n            isV3\n              ? i === 0 && !shouldCenterContent && styles.v3Spacing\n              : i !== 0 && styles.v2Spacing,\n            shouldCenterContent && styles.centerAlignedContent,\n            child.props.style,\n          ];\n        }\n        return React.cloneElement(child, props);\n      })\n  );\n};\n\nconst styles = StyleSheet.create({\n  centerAlignedContent: {\n    alignItems: 'center',\n  },\n  v2Spacing: {\n    marginLeft: 8,\n  },\n  v3Spacing: {\n    marginLeft: 12,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}